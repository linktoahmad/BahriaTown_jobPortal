[{"D:\\job-portal-main\\frontend\\src\\index.js":"1","D:\\job-portal-main\\frontend\\src\\reportWebVitals.js":"2","D:\\job-portal-main\\frontend\\src\\App.js":"3","D:\\job-portal-main\\frontend\\src\\component\\Welcome.js":"4","D:\\job-portal-main\\frontend\\src\\component\\Navbar.js":"5","D:\\job-portal-main\\frontend\\src\\component\\Logout.js":"6","D:\\job-portal-main\\frontend\\src\\component\\Login.js":"7","D:\\job-portal-main\\frontend\\src\\component\\Signup.js":"8","D:\\job-portal-main\\frontend\\src\\component\\Applications.js":"9","D:\\job-portal-main\\frontend\\src\\component\\Home.js":"10","D:\\job-portal-main\\frontend\\src\\component\\Profile.js":"11","D:\\job-portal-main\\frontend\\src\\component\\recruiter\\CreateJobs.js":"12","D:\\job-portal-main\\frontend\\src\\component\\recruiter\\MyJobs.js":"13","D:\\job-portal-main\\frontend\\src\\component\\recruiter\\JobApplications.js":"14","D:\\job-portal-main\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js":"15","D:\\job-portal-main\\frontend\\src\\lib\\MessagePopup.js":"16","D:\\job-portal-main\\frontend\\src\\component\\recruiter\\Profile.js":"17","D:\\job-portal-main\\frontend\\src\\lib\\isAuth.js":"18","D:\\job-portal-main\\frontend\\src\\lib\\PasswordInput.js":"19","D:\\job-portal-main\\frontend\\src\\lib\\EmailInput.js":"20","D:\\job-portal-main\\frontend\\src\\lib\\apiList.js":"21","D:\\job-portal-main\\frontend\\src\\lib\\FileUploadInput.js":"22","D:\\bahroa careers portal 2-4-22 updated\\src\\index.js":"23","D:\\bahroa careers portal 2-4-22 updated\\src\\reportWebVitals.js":"24","D:\\bahroa careers portal 2-4-22 updated\\src\\App.js":"25","D:\\bahroa careers portal 2-4-22 updated\\src\\lib\\isAuth.js":"26","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\WelcomeUser.js":"27","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Welcome.js":"28","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\LandingPage.js":"29","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Navbar.js":"30","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\404.js":"31","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Login.js":"32","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Logout.js":"33","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Signup.js":"34","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Home.js":"35","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Applications.js":"36","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Profile.js":"37","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Admin\\Home.js":"38","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Admin\\Status.js":"39","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Admin\\Recruiters.js":"40","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Admin\\Jobs.js":"41","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Admin\\CreatUser.js":"42","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\recruiter\\CreateJobs.js":"43","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\recruiter\\MyJobs.js":"44","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\recruiter\\Schedule.js":"45","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\recruiter\\JobApplications.js":"46","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\recruiter\\AcceptedApplicants.js":"47","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\recruiter\\Profile.js":"48","D:\\bahroa careers portal 2-4-22 updated\\src\\lib\\MessagePopup.js":"49","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Stepper.js":"50","D:\\bahroa careers portal 2-4-22 updated\\src\\lib\\PasswordInput.js":"51","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\carasol.js":"52","D:\\bahroa careers portal 2-4-22 updated\\src\\lib\\EmailInput.js":"53","D:\\bahroa careers portal 2-4-22 updated\\src\\lib\\apiList.js":"54","D:\\bahroa careers portal 2-4-22 updated\\src\\lib\\FileUploadInput.js":"55","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\progressbar.js":"56"},{"size":500,"mtime":1612178250000,"results":"57","hashOfConfig":"58"},{"size":362,"mtime":1612178250000,"results":"59","hashOfConfig":"58"},{"size":5264,"mtime":1635600660995,"results":"60","hashOfConfig":"58"},{"size":738,"mtime":1612178250000,"results":"61","hashOfConfig":"58"},{"size":6509,"mtime":1635939413390,"results":"62","hashOfConfig":"58"},{"size":489,"mtime":1612178250000,"results":"63","hashOfConfig":"58"},{"size":3612,"mtime":1635999936334,"results":"64","hashOfConfig":"58"},{"size":13996,"mtime":1636371163464,"results":"65","hashOfConfig":"58"},{"size":7836,"mtime":1635418565879,"results":"66","hashOfConfig":"58"},{"size":27866,"mtime":1636616606350,"results":"67","hashOfConfig":"58"},{"size":12454,"mtime":1636455115263,"results":"68","hashOfConfig":"58"},{"size":23472,"mtime":1636365875679,"results":"69","hashOfConfig":"58"},{"size":26739,"mtime":1635407098051,"results":"70","hashOfConfig":"58"},{"size":25953,"mtime":1636087739142,"results":"71","hashOfConfig":"58"},{"size":24420,"mtime":1635418190072,"results":"72","hashOfConfig":"58"},{"size":503,"mtime":1612178250000,"results":"73","hashOfConfig":"58"},{"size":5092,"mtime":1636006193035,"results":"74","hashOfConfig":"58"},{"size":165,"mtime":1612178250000,"results":"75","hashOfConfig":"58"},{"size":1666,"mtime":1612178250000,"results":"76","hashOfConfig":"58"},{"size":1167,"mtime":1612178250000,"results":"77","hashOfConfig":"58"},{"size":721,"mtime":1636455104693,"results":"78","hashOfConfig":"58"},{"size":3496,"mtime":1634197685931,"results":"79","hashOfConfig":"58"},{"size":500,"mtime":1612131450000,"results":"80","hashOfConfig":"81"},{"size":362,"mtime":1612131450000,"results":"82","hashOfConfig":"81"},{"size":5325,"mtime":1652804707280,"results":"83","hashOfConfig":"81"},{"size":165,"mtime":1612131450000,"results":"84","hashOfConfig":"81"},{"size":467,"mtime":1635272402000,"results":"85","hashOfConfig":"81"},{"size":738,"mtime":1612131450000,"results":"86","hashOfConfig":"81"},{"size":2260,"mtime":1652805457427,"results":"87","hashOfConfig":"81"},{"size":6509,"mtime":1635896212000,"results":"88","hashOfConfig":"81"},{"size":785,"mtime":1634162460000,"results":"89","hashOfConfig":"81"},{"size":3612,"mtime":1635956736000,"results":"90","hashOfConfig":"81"},{"size":489,"mtime":1612131450000,"results":"91","hashOfConfig":"81"},{"size":13996,"mtime":1636324362000,"results":"92","hashOfConfig":"81"},{"size":27866,"mtime":1636569806000,"results":"93","hashOfConfig":"81"},{"size":7836,"mtime":1635375364000,"results":"94","hashOfConfig":"81"},{"size":12454,"mtime":1636408314000,"results":"95","hashOfConfig":"81"},{"size":18929,"mtime":1634691036000,"results":"96","hashOfConfig":"81"},{"size":4126,"mtime":1635792552000,"results":"97","hashOfConfig":"81"},{"size":14424,"mtime":1634747624000,"results":"98","hashOfConfig":"81"},{"size":21018,"mtime":1634160012000,"results":"99","hashOfConfig":"81"},{"size":6677,"mtime":1634927580000,"results":"100","hashOfConfig":"81"},{"size":23472,"mtime":1636319074000,"results":"101","hashOfConfig":"81"},{"size":26739,"mtime":1635363898000,"results":"102","hashOfConfig":"81"},{"size":20924,"mtime":1635265568000,"results":"103","hashOfConfig":"81"},{"size":25953,"mtime":1636044538000,"results":"104","hashOfConfig":"81"},{"size":24420,"mtime":1635374990000,"results":"105","hashOfConfig":"81"},{"size":5092,"mtime":1635962992000,"results":"106","hashOfConfig":"81"},{"size":503,"mtime":1612131450000,"results":"107","hashOfConfig":"81"},{"size":5097,"mtime":1635283572000,"results":"108","hashOfConfig":"81"},{"size":1666,"mtime":1612131450000,"results":"109","hashOfConfig":"81"},{"size":12414,"mtime":1652805691869,"results":"110","hashOfConfig":"81"},{"size":1167,"mtime":1612131450000,"results":"111","hashOfConfig":"81"},{"size":721,"mtime":1636408304000,"results":"112","hashOfConfig":"81"},{"size":3496,"mtime":1634154484000,"results":"113","hashOfConfig":"81"},{"size":725,"mtime":1635186030000,"results":"114","hashOfConfig":"81"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},"ezkble",{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"117"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"117"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"117"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"117"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"117"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"117"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"117"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"117"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"117"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"117"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"117"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"117"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"117"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vpmbvd",{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"180"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"180"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"200","messages":"201","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"202","messages":"203","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"208","messages":"209","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"210","messages":"211","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"212","messages":"213","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"220","messages":"221","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"224","messages":"225","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"226","messages":"227","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\job-portal-main\\frontend\\src\\index.js",[],["244","245"],"D:\\job-portal-main\\frontend\\src\\reportWebVitals.js",[],"D:\\job-portal-main\\frontend\\src\\App.js",["246"],"import { createContext, useState } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { Grid, makeStyles } from \"@material-ui/core\";\n\nimport Welcome, { ErrorPage } from \"./component/Welcome\";\nimport WelcomeUser from \"./component/WelcomeUser\";\nimport Landing from \"./component/LandingPage\";\nimport Navbar from \"./component/Navbar\";\nimport NotFound from \"./component/404\";\nimport Login from \"./component/Login\";\nimport Logout from \"./component/Logout\";\nimport Signup from \"./component/Signup\";\nimport Home from \"./component/Home\";\nimport Admin from \"./component/Admin/Home\";\nimport Status from \"./component/Admin/Status\";\nimport Recruiters from \"./component/Admin/Recruiters\";\nimport AdminJobs from \"./component/Admin/Jobs\";\nimport Applications from \"./component/Applications\";\nimport Profile from \"./component/Profile\";\nimport CreateJobs from \"./component/recruiter/CreateJobs\";\nimport MyJobs from \"./component/recruiter/MyJobs\";\nimport Schedule from \"./component/recruiter/Schedule\";\nimport JobApplications from \"./component/recruiter/JobApplications\";\nimport AcceptedApplicants from \"./component/recruiter/AcceptedApplicants\";\nimport RecruiterProfile from \"./component/recruiter/Profile\";\nimport AddUser from \"./component/Admin/CreatUser\";\nimport MessagePopup from \"./lib/MessagePopup\";\nimport isAuth, { userType } from \"./lib/isAuth\";\nimport logo from \"./logo.png\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    backgroundImage: `url(${logo})`,\n    backgroundAttachment: \"fixed\",\n    background: \"#f7faf9\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    minHeight: \"98vh\",\n    paddingTop: \"60px\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n}));\n\nexport const SetPopupContext = createContext();\n\nfunction App() {\n  const classes = useStyles();\n  const [popup, setPopup] = useState({\n    open: false,\n    severity: \"\",\n    message: \"\",\n  });\n  return (\n    <BrowserRouter>\n      <SetPopupContext.Provider value={setPopup}>\n        <Grid container direction=\"column\">\n          <Grid item xs>\n            <Navbar />\n          </Grid>\n          <Grid item className={classes.body}>\n            <Switch>\n              <Route exact path=\"/\">\n                {userType() === \"applicant\" ? (\n                  <WelcomeUser />\n                ) : userType() === null ? (\n                  <Landing />\n                ) : userType() === \"admin\" ? (\n                  <Status />\n                ) : (\n                  <Welcome />\n                )}\n              </Route>\n              <Route exact path=\"/login\">\n                <Login />\n              </Route>\n              <Route exact path=\"/signup\">\n                <Signup />\n              </Route>\n              <Route exact path=\"/logout\">\n                <Logout />\n              </Route>\n              <Route exact path=\"/home\">\n                <Home />\n              </Route>\n              <Route exact path=\"/adminHome\">\n                {userType() === \"admin\" ? <Admin /> : <NotFound />}\n              </Route>\n              <Route exact path=\"/CreateUser\">\n                {userType() === \"admin\" ? <AddUser /> : <NotFound />}\n              </Route>\n              <Route exact path=\"/adminJobs\">\n                {userType() === \"admin\" ? <AdminJobs /> : <NotFound />}\n              </Route>\n              <Route exact path=\"/getRecruiters\">\n                {userType() === \"admin\" ? <Recruiters /> : <NotFound />}\n              </Route>\n              <Route exact path=\"/applications\">\n                {userType() === \"applicant\" ? <Applications /> : <NotFound />}\n              </Route>\n              <Route exact path=\"/profile\">\n                {userType() === \"recruiter\" ? (\n                  <RecruiterProfile />\n                ) : (\n                  <Profile />\n                )}\n              </Route>\n              <Route exact path=\"/schedule\">\n                {userType() === \"recruiter\" ? <Schedule /> : <NotFound />}\n              </Route>\n              <Route exact path=\"/addjob\">\n                {userType() === \"recruiter\" ? <CreateJobs /> : <NotFound />}\n              </Route>\n              <Route exact path=\"/myjobs\">\n                {userType() === \"recruiter\" ? <MyJobs /> : <NotFound />}\n              </Route>\n              <Route exact path=\"/job/applications/:jobId\">\n                {userType() === \"recruiter\" ? (\n                  <JobApplications />\n                ) : (\n                  <NotFound />\n                )}\n              </Route>\n              <Route exact path=\"/employees\">\n                {userType() === \"recruiter\" ? (\n                  <AcceptedApplicants />\n                ) : (\n                  <NotFound />\n                )}\n              </Route>\n              <Route>\n                <ErrorPage />\n              </Route>\n            </Switch>\n          </Grid>\n        </Grid>\n        <MessagePopup\n          open={popup.open}\n          setOpen={(status) =>\n            setPopup({\n              ...popup,\n              open: status,\n            })\n          }\n          severity={popup.severity}\n          message={popup.message}\n        />\n      </SetPopupContext.Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","D:\\job-portal-main\\frontend\\src\\component\\Welcome.js",[],"D:\\job-portal-main\\frontend\\src\\component\\Navbar.js",[],"D:\\job-portal-main\\frontend\\src\\component\\Logout.js",["247"],"import { useEffect, useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { SetPopupContext } from \"../App\";\n\nconst Logout = (props) => {\n  const setPopup = useContext(SetPopupContext);\n  useEffect(() => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"type\");\n    setPopup({\n      open: true,\n      severity: \"success\",\n      message: \"Logged out successfully\",\n    });\n  }, []);\n  return <Redirect to=\"/login\" />;\n};\n\nexport default Logout;\n","D:\\job-portal-main\\frontend\\src\\component\\Login.js",["248"],"import { useContext, useState } from \"react\";\nimport {\n  Grid,\n  TextField,\n  Button,\n  Typography,\n  makeStyles,\n  Paper,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\n\nimport PasswordInput from \"../lib/PasswordInput\";\nimport EmailInput from \"../lib/EmailInput\";\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\nimport isAuth from \"../lib/isAuth\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    padding: \"60px 60px\",\n  },\n  inputBox: {\n    width: \"300px\",\n  },\n  submitButton: {\n    width: \"300px\",\n  },\n}));\n\nconst Login = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n\n  const [loggedin, setLoggedin] = useState(isAuth());\n\n  const [loginDetails, setLoginDetails] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const [inputErrorHandler, setInputErrorHandler] = useState({\n    email: {\n      error: false,\n      message: \"\",\n    },\n    password: {\n      error: false,\n      message: \"\",\n    },\n  });\n\n  const handleInput = (key, value) => {\n    setLoginDetails({\n      ...loginDetails,\n      [key]: value,\n    });\n  };\n\n  const handleInputError = (key, status, message) => {\n    setInputErrorHandler({\n      ...inputErrorHandler,\n      [key]: {\n        error: status,\n        message: message,\n      },\n    });\n  };\n\n  const handleLogin = () => {\n    const verified = !Object.keys(inputErrorHandler).some((obj) => {\n      return inputErrorHandler[obj].error;\n    });\n    if (verified) {\n      axios\n        .post(apiList.login, loginDetails)\n        .then((response) => {\n          localStorage.setItem(\"token\", response.data.token);\n          localStorage.setItem(\"type\", response.data.type);\n          setLoggedin(isAuth());\n          setPopup({\n            open: true,\n            severity: \"success\",\n            message: \"Logged in successfully\",\n          });\n          console.log(response);\n        })\n        .catch((err) => {\n          setPopup({\n            open: true,\n            severity: \"error\",\n            message: \"Network Error\",\n          });\n          console.log(err.response);\n        });\n    } else {\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"Incorrect Input\",\n      });\n    }\n  };\n\n  return loggedin ? (\n    <Redirect to=\"/\" />\n  ) : (\n    <Paper elevation={3} className={classes.body}>\n      <Grid container direction=\"column\" spacing={4} alignItems=\"center\">\n        <Grid item>\n          <Typography variant=\"h3\" component=\"h2\">\n            Login\n          </Typography>\n        </Grid>\n        <Grid item>\n          <EmailInput\n            label=\"Email\"\n            value={loginDetails.email}\n            onChange={(event) => handleInput(\"email\", event.target.value)}\n            inputErrorHandler={inputErrorHandler}\n            handleInputError={handleInputError}\n            className={classes.inputBox}\n          />\n        </Grid>\n        <Grid item>\n          <PasswordInput\n            label=\"Password\"\n            value={loginDetails.password}\n            onChange={(event) => handleInput(\"password\", event.target.value)}\n            className={classes.inputBox}\n          />\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            style={{\n              backgroundColor: \"#088475\",\n              color: \"white\",\n            }}\n            onClick={() => handleLogin()}\n            className={classes.submitButton}\n          >\n            Login\n          </Button>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default Login;\n","D:\\job-portal-main\\frontend\\src\\component\\Signup.js",["249"],"import { useState, useContext } from \"react\";\nimport {\n  Grid,\n  TextField,\n  Button,\n  Typography,\n  makeStyles,\n  Paper,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport ChipInput from \"material-ui-chip-input\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport FaceIcon from \"@material-ui/icons/Face\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/material.css\";\n\nimport PasswordInput from \"../lib/PasswordInput\";\nimport EmailInput from \"../lib/EmailInput\";\nimport FileUploadInput from \"../lib/FileUploadInput\";\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\nimport isAuth from \"../lib/isAuth\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    padding: \"60px 60px\",\n  },\n  inputBox: {\n    width: \"400px\",\n  },\n  submitButton: {\n    width: \"400px\",\n  },\n}));\n\nconst MultifieldInput = (props) => {\n  const classes = useStyles();\n  const { education, setEducation } = props;\n\n  return (\n    <>\n      {education.map((obj, key) => (\n        <Grid\n          item\n          container\n          className={classes.inputBox}\n          key={key}\n          style={{ paddingLeft: 0, paddingRight: 0 }}\n        >\n          <Grid item xs={6}>\n            <TextField\n              label={`Institution Name #${key + 1}`}\n              value={education[key].institutionName}\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].institutionName = event.target.value;\n                setEducation(newEdu);\n              }}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"Start Year\"\n              value={obj.startYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].startYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"End Year\"\n              value={obj.endYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].endYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n        </Grid>\n      ))}\n      <Grid item>\n        <Button\n          variant=\"contained\"\n          style={{\n            backgroundColor: \"#088475\",\n            color: \"white\",\n          }}\n          onClick={() =>\n            setEducation([\n              ...education,\n              {\n                institutionName: \"\",\n                startYear: \"\",\n                endYear: \"\",\n              },\n            ])\n          }\n          className={classes.inputBox}\n        >\n          Add another institution details\n        </Button>\n      </Grid>\n    </>\n  );\n};\n\nconst Login = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n\n  const [loggedin, setLoggedin] = useState(isAuth());\n\n  const [signupDetails, setSignupDetails] = useState({\n    type: \"applicant\",\n    email: \"\",\n    password: \"\",\n    name: \"\",\n    education: [],\n    skills: [],\n    resume: \"\",\n    profile: \"\",\n    bio: \"\",\n    contactNumber: \"\",\n    MyAddress: \"\",\n  });\n\n  const [phone, setPhone] = useState(\"\");\n\n  const [education, setEducation] = useState([\n    {\n      institutionName: \"\",\n      startYear: \"\",\n      endYear: \"\",\n    },\n  ]);\n  const [files, setFiles] = useState({\n    profileImage: null,\n    resume: null,\n  });\n  const [inputErrorHandler, setInputErrorHandler] = useState({\n    email: {\n      untouched: true,\n      required: true,\n      error: false,\n      message: \"\",\n    },\n    password: {\n      untouched: true,\n      required: true,\n      error: false,\n      message: \"\",\n    },\n    name: {\n      untouched: true,\n      required: true,\n      error: false,\n      message: \"\",\n    },\n  });\n\n  const handleInput = (key, value) => {\n    setSignupDetails({\n      ...signupDetails,\n      [key]: value,\n    });\n  };\n\n  const handleInputError = (key, status, message) => {\n    setInputErrorHandler({\n      ...inputErrorHandler,\n      [key]: {\n        required: true,\n        untouched: false,\n        error: status,\n        message: message,\n      },\n    });\n  };\n\n  const handleLogin = () => {\n    const tmpErrorHandler = {};\n    Object.keys(inputErrorHandler).forEach((obj) => {\n      if (inputErrorHandler[obj].required && inputErrorHandler[obj].untouched) {\n        tmpErrorHandler[obj] = {\n          required: true,\n          untouched: false,\n          error: true,\n          message: `${obj[0].toUpperCase() + obj.substr(1)} is required`,\n        };\n      } else {\n        tmpErrorHandler[obj] = inputErrorHandler[obj];\n      }\n    });\n\n    console.log(education);\n\n    let updatedDetails = {\n      ...signupDetails,\n      education: education\n        .filter((obj) => obj.institutionName.trim() !== \"\")\n        .map((obj) => {\n          if (obj[\"endYear\"] === \"\") {\n            delete obj[\"endYear\"];\n          }\n          return obj;\n        }),\n    };\n\n    setSignupDetails(updatedDetails);\n\n    const verified = !Object.keys(tmpErrorHandler).some((obj) => {\n      return tmpErrorHandler[obj].error;\n    });\n\n    if (verified) {\n      axios\n        .post(apiList.signup, updatedDetails)\n        .then((response) => {\n          localStorage.setItem(\"token\", response.data.token);\n          localStorage.setItem(\"type\", response.data.type);\n          setLoggedin(isAuth());\n          setPopup({\n            open: true,\n            severity: \"success\",\n            message: \"Logged in successfully\",\n          });\n          console.log(response);\n          sendmail();\n        })\n        .catch((err) => {\n          setPopup({\n            open: true,\n            severity: \"error\",\n            message: err.response.data.message,\n          });\n          console.log(err.response);\n        });\n    } else {\n      setInputErrorHandler(tmpErrorHandler);\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"Incorrect Input\",\n      });\n    }\n  };\n\n  const sendmail = () => {\n    const data ={\n      email:signupDetails.email,\n      name:signupDetails.name\n    }\n    axios.post(apiList.sendmail,data).then((response) => {\n      console.log(response);\n    });\n  };\n\n  /*  const handleLoginRecruiter = () => {\n    const tmpErrorHandler = {};\n    Object.keys(inputErrorHandler).forEach((obj) => {\n      if (inputErrorHandler[obj].required && inputErrorHandler[obj].untouched) {\n        tmpErrorHandler[obj] = {\n          required: true,\n          untouched: false,\n          error: true,\n          message: `${obj[0].toUpperCase() + obj.substr(1)} is required`,\n        };\n      } else {\n        tmpErrorHandler[obj] = inputErrorHandler[obj];\n      }\n    });\n\n    let updatedDetails = {\n      ...signupDetails,\n    };\n    if (phone !== \"\") {\n      updatedDetails = {\n        ...signupDetails,\n        contactNumber: `+${phone}`,\n      };\n    } else {\n      updatedDetails = {\n        ...signupDetails,\n        contactNumber: \"\",\n      };\n    }\n\n    setSignupDetails(updatedDetails);\n\n    const verified = !Object.keys(tmpErrorHandler).some((obj) => {\n      return tmpErrorHandler[obj].error;\n    });\n\n    console.log(updatedDetails);\n\n    if (verified) {\n      axios\n        .post(apiList.signup, updatedDetails)\n        .then((response) => {\n          localStorage.setItem(\"token\", response.data.token);\n          localStorage.setItem(\"type\", response.data.type);\n          setLoggedin(isAuth());\n          setPopup({\n            open: true,\n            severity: \"success\",\n            message: \"Logged in successfully\",\n          });\n          console.log(response);\n        })\n        .catch((err) => {\n          setPopup({\n            open: true,\n            severity: \"error\",\n            message: err.response.data.message,\n          });\n          console.log(err.response);\n        });\n    } else {\n      setInputErrorHandler(tmpErrorHandler);\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"Incorrect Input\",\n      });\n    }\n  };\n  */\n\n  return loggedin ? (\n    <Redirect to=\"/\" />\n  ) : (\n    <Paper elevation={3} className={classes.body}>\n      <Grid container direction=\"column\" spacing={4} alignItems=\"center\">\n        <Grid item>\n          <Typography variant=\"h3\" component=\"h2\">\n            Signup\n          </Typography>\n        </Grid>\n        {/*<Grid item>\n          <TextField\n            select\n            label=\"Category\"\n            variant=\"outlined\"\n            className={classes.inputBox}\n            value={signupDetails.type}\n            onChange={(event) => {\n              handleInput(\"type\", event.target.value);\n            }}\n          >\n            <MenuItem value=\"applicant\">Applicant</MenuItem>\n            <MenuItem value=\"recruiter\">Recruiter</MenuItem>\n            <MenuItem value=\"admin\">Admin</MenuItem>\n          </TextField>\n          </Grid>*/}\n        <Grid item>\n          <TextField\n            label=\"Name\"\n            value={signupDetails.name}\n            onChange={(event) => handleInput(\"name\", event.target.value)}\n            className={classes.inputBox}\n            error={inputErrorHandler.name.error}\n            helperText={inputErrorHandler.name.message}\n            onBlur={(event) => {\n              if (event.target.value === \"\") {\n                handleInputError(\"name\", true, \"Name is required\");\n              } else {\n                handleInputError(\"name\", false, \"\");\n              }\n            }}\n            variant=\"outlined\"\n          />\n        </Grid>\n        <Grid item>\n          <EmailInput\n            label=\"Email\"\n            value={signupDetails.email}\n            onChange={(event) => handleInput(\"email\", event.target.value)}\n            inputErrorHandler={inputErrorHandler}\n            handleInputError={handleInputError}\n            className={classes.inputBox}\n            required={true}\n          />\n        </Grid>\n        <Grid item>\n          <PasswordInput\n            label=\"Password\"\n            value={signupDetails.password}\n            onChange={(event) => handleInput(\"password\", event.target.value)}\n            className={classes.inputBox}\n            error={inputErrorHandler.password.error}\n            helperText={inputErrorHandler.password.message}\n            onBlur={(event) => {\n              if (event.target.value === \"\") {\n                handleInputError(\"password\", true, \"Password is required\");\n              } else {\n                handleInputError(\"password\", false, \"\");\n              }\n            }}\n          />\n        </Grid>\n        {signupDetails.type === \"applicant\" ? (\n          <>\n            <MultifieldInput\n              education={education}\n              setEducation={setEducation}\n            />\n            <Grid item>\n              <ChipInput\n                className={classes.inputBox}\n                label=\"Skills\"\n                variant=\"outlined\"\n                helperText=\"Press enter to add skills\"\n                onChange={(chips) =>\n                  setSignupDetails({ ...signupDetails, skills: chips })\n                }\n              />\n            </Grid>\n            <Grid item>\n              <FileUploadInput\n                className={classes.inputBox}\n                label=\"Resume (.pdf)\"\n                icon={<DescriptionIcon />}\n                value={files.resume}\n                onChange={(event) =>\n                  setFiles({\n                    ...files,\n                    resume: event.target.files[0],\n                  })\n                }\n                uploadTo={apiList.uploadResume}\n                handleInput={handleInput}\n                identifier={\"resume\"}\n              />\n            </Grid>\n            <Grid item>\n              <FileUploadInput\n                className={classes.inputBox}\n                label=\"Profile Photo (.jpg/.png)\"\n                icon={<FaceIcon />}\n                value={files.profileImage}\n                onChange={(event) =>\n                  setFiles({\n                    ...files,\n                    profileImage: event.target.files[0],\n                  })\n                }\n                uploadTo={apiList.uploadProfileImage}\n                handleInput={handleInput}\n                identifier={\"profile\"}\n              />\n            </Grid>\n          </>\n        ) : signupDetails.type === \"recruiter\" ? (\n          <>\n            <Grid item style={{ width: \"100%\" }}>\n              <TextField\n                label=\"Bio (upto 250 words)\"\n                multiline\n                rows={8}\n                style={{ width: \"100%\" }}\n                variant=\"outlined\"\n                value={signupDetails.bio}\n                onChange={(event) => {\n                  if (\n                    event.target.value.split(\" \").filter(function (n) {\n                      return n != \"\";\n                    }).length <= 250\n                  ) {\n                    handleInput(\"bio\", event.target.value);\n                  }\n                }}\n              />\n            </Grid>\n            <Grid item>\n              <PhoneInput\n                country={\"in\"}\n                value={phone}\n                onChange={(phone) => setPhone(phone)}\n              />\n            </Grid>\n          </>\n        ) : (\n          <></>\n        )}\n\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            style={{\n              backgroundColor: \"#088475\",\n              color: \"white\",\n            }}\n            onClick={() => {\n              handleLogin();\n            }}\n            className={classes.submitButton}\n          >\n            Signup\n          </Button>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default Login;\n","D:\\job-portal-main\\frontend\\src\\component\\Applications.js",["250","251","252","253","254","255","256","257","258","259"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Checkbox,\n} from \"@material-ui/core\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\n\nconst ApplicationTile = (props) => {\n  const classes = useStyles();\n  const { application } = props;\n  const setPopup = useContext(SetPopupContext);\n  const [open, setOpen] = useState(false);\n  const [rating, setRating] = useState(application.job.rating);\n\n  const appliedOn = new Date(application.dateOfApplication);\n  const joinedOn = new Date(application.dateOfJoining);\n  const interviewOn = new Date(application.dateOfInterview);\n  const Meduim = application.InterviewMedium;\n\n  const fetchRating = () => {\n    axios\n      .get(`${apiList.rating}?id=${application.job._id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setRating(response.data.rating);\n        console.log(response.data);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  const changeRating = () => {\n    axios\n      .put(\n        apiList.rating,\n        { rating: rating, jobId: application.job._id },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        console.log(response.data);\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: \"Rating updated successfully\",\n        });\n        fetchRating();\n        setOpen(false);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        console.log(err);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        fetchRating();\n        setOpen(false);\n      });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const colorSet = {\n    applied: \"#3454D1\",\n    shortlisted: \"#DC851F\",\n    accepted: \"#09BC8A\",\n    rejected: \"#D1345B\",\n    deleted: \"#B49A67\",\n    cancelled: \"#FF8484\",\n    finished: \"#4EA5D9\",\n    review:\"#7570ff\"\n  };\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid container item xs={9} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\">{application.job.title}</Typography>\n          </Grid>\n          <Grid item>Posted By: {application.recruiter.name}</Grid>\n          <Grid item>Role : {application.job.jobType}</Grid>\n          <Grid item>Salary : Rs/- {application.job.salary} per month</Grid>\n          <Grid item>\n            Duration :{\" \"}\n            {application.job.duration !== 0\n              ? `${application.job.duration} month`\n              : `Flexible`}\n          </Grid>\n          <Grid item>\n            {application.job.skillsets.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid>\n          <Grid item>Applied On: {appliedOn.toLocaleDateString()}</Grid>\n          {application.status === \"shortlisted\" ? (\n            <>\n            <Grid item style={{fontWeight:\"bold\",color:\"#fa4848\"}}>Interview On: {interviewOn.toLocaleDateString()}</Grid>\n            <Grid item style={{fontWeight:\"bold\",color:\"#fa4848\"}}>Medium: {Meduim}</Grid>\n            </>\n          ) : null}\n          {application.status === \"accepted\" ||\n          application.status === \"finished\" ? (\n            <Grid item >Joined On: {joinedOn.toLocaleDateString()}</Grid>\n          ) : null}\n        </Grid>\n        <Grid item container direction=\"column\" xs={3}>\n          <Grid item xs>\n            <Paper\n              className={classes.statusBlock}\n              style={{\n                background: colorSet[application.status],\n                color: \"#ffffff\",\n              }}\n            >\n              {application.status==\"review\"?\"Application under review\":application.status}\n            </Paper>\n          </Grid>\n          {application.status === \"accepted\" ||\n          application.status === \"finished\" ? (\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.statusBlock}\n                onClick={() => {\n                  fetchRating();\n                  setOpen(true);\n                }}\n              >\n                Rate Job\n              </Button>\n            </Grid>\n          ) : null}\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Rating\n            name=\"simple-controlled\"\n            style={{ marginBottom: \"30px\" }}\n            value={rating === -1 ? null : rating}\n            onChange={(event, newValue) => {\n              setRating(newValue);\n            }}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ padding: \"10px 50px\" }}\n            onClick={() => changeRating()}\n          >\n            Submit\n          </Button>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst Applications = (props) => {\n  const setPopup = useContext(SetPopupContext);\n  const [applications, setApplications] = useState([]);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    axios\n      .get(apiList.applications, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setApplications(response.data);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  return (\n    <Grid\n      container\n      item\n      direction=\"column\"\n      alignItems=\"center\"\n      style={{ padding: \"30px\", minHeight: \"93vh\" }}\n    >\n      <Grid item>\n        <Typography variant=\"h2\">Applications</Typography>\n      </Grid>\n      <Grid\n        container\n        item\n        xs\n        direction=\"column\"\n        style={{ width: \"100%\" }}\n        alignItems=\"stretch\"\n        justify=\"center\"\n      >\n        {applications.length > 0 ? (\n          applications.map((obj) => (\n            <Grid item>\n              <ApplicationTile application={obj} />\n            </Grid>\n          ))\n        ) : (\n          <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n            No Applications Found\n          </Typography>\n        )}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Applications;\n","D:\\job-portal-main\\frontend\\src\\component\\Home.js",["260","261","262","263","264","265","266","267","268"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  //FormGroup,\n  MenuItem,\n  Checkbox,\n} from \"@material-ui/core\";\nimport Rating from \"@material-ui/lab/Rating\";\n//import Pagination from \"@material-ui/lab/Pagination\";\nimport axios from \"axios\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { jsPDF } from \"jspdf\";\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\nimport { userType } from \"../lib/isAuth\";\nimport checklist from \"./checklist.png\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  button: {\n    width: \"100%\",\n    height: \"100%\",\n    backgroundColor: \"#088475\",\n    color: \"white\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\nconst DetailsTile = (props) => {\n  const { open, handleClose, details, name } = props;\n  return (\n    <Modal\n      open={open}\n      onClose={handleClose}\n      style={{\n        height: \"100%\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <Paper\n        style={{\n          padding: \"25px\",\n          outline: \"none\",\n          minWidth: \"10%\",\n          maxWidth: \"50%\",\n        }}\n        elevation={3}\n      >\n        <Grid style={{ fontWeight: \"bold\", fontSize: \"20px\" }}>{name}</Grid>\n        <Grid>{details}</Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst JobTile = (props) => {\n  const classes = useStyles();\n  const { job, userMail, userName } = props;\n  const setPopup = useContext(SetPopupContext);\n  const [open, setOpen] = useState(false);\n  const [sop, setSop] = useState(\"\");\n\n  const handleClose = () => {\n    setOpen(false);\n    setSop(\"\");\n  };\n\n  const sendmail = () => {\n    const data ={\n      email:userMail,\n      name:userName,\n      jobTitle:job.title\n    }\n    axios.post(apiList.sendmail,data).then((response) => {\n      console.log(response);\n    });\n  };\n\n  const handleApply = () => {\n    //  console.log(job._id);\n    // console.log(sop);\n    axios\n      .post(\n        `${apiList.jobs}/${job._id}/applications`,\n        {\n          sop: sop,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        handleClose();\n        sendmail();\n      })\n      .catch((err) => {\n        //   console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleClose();\n      });\n  };\n  let source = `<h1>hey baby</h1>`;\n  const doc = new jsPDF();\n  doc.text(\"Hello world!\", 10, 10);\n\n  const deadline = new Date(job.deadline).toLocaleDateString();\n  const [helpOpen, setHelp] = useState(false);\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid container item xs={9} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\">{job.title}</Typography>\n          </Grid>\n          <Grid item>\n            <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\n          </Grid>\n          <Grid item>Type : {job.jobType}</Grid>\n\n          <Grid item>\n            {\n              (job.salary == 0\n                ? \"Salary : yet to decide\"\n                : `Salary : Rs/- ${job.salary} per month`)\n            }\n          </Grid>\n          <Grid item>\n            Experience :{\" \"}\n            {job.duration !== 0 ? `${job.duration} year` : `Flexible`}\n          </Grid>\n          <Grid item>Posted By : {job.recruiter.name}</Grid>\n          <Grid item>Application Deadline : {deadline}</Grid>\n          <Grid item>\n            {job.skillsets.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid>\n          <Grid style={{ alignItems: \"colomn\" }}>\n            <Button\n              style={{\n                color: \"#088475\",\n                fontWeight: \"bold\",\n              }}\n              onClick={() => setHelp(true)}\n            >\n              Details\n            </Button>\n            <Button\n              style={{\n                color: \"#088475\",\n                fontWeight: \"bold\",\n              }}\n              onClick={() => doc.save(`advertisement for ${job.title}.pdf`)}\n            >\n              Download Advertisement\n            </Button>\n          </Grid>\n        </Grid>\n        <Grid item xs={3}>\n          <Button\n            variant=\"contained\"\n            className={classes.button}\n            onClick={() => {\n              setOpen(true);\n            }}\n            disabled={userType() === \"recruiter\"}\n          >\n            Apply\n          </Button>\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"50%\",\n            alignItems: \"center\",\n          }}\n        >\n          {props.apply ? (\n            <>\n              <TextField\n                label=\"Write Message/Cover letter (upto 250 words)\"\n                multiline\n                rows={8}\n                style={{ width: \"100%\", marginBottom: \"30px\" }}\n                variant=\"outlined\"\n                value={sop}\n                onChange={(event) => {\n                  if (\n                    event.target.value.split(\" \").filter(function (n) {\n                      return n != \"\";\n                    }).length <= 250\n                  ) {\n                    setSop(event.target.value);\n                  }\n                }}\n              />\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleApply()}\n              >\n                Submit\n              </Button>\n            </>\n          ) : (\n            <>\n              <Grid item>\n                <Typography variant=\"h5\">\n                  Please Complete Profile Information\n                </Typography>\n              </Grid>\n              <img\n                src={checklist}\n                style={{ width: \"250px\", height: \"250px\" }}\n              ></img>\n            </>\n          )}\n        </Paper>\n      </Modal>\n      <DetailsTile\n        open={helpOpen}\n        name={job.title}\n        details={job.details}\n        handleClose={() => setHelp(false)}\n      />\n    </Paper>\n  );\n};\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Job Type\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"fullTime\"\n                      checked={searchOptions.jobType.fullTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Full Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"partTime\"\n                      checked={searchOptions.jobType.partTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Part Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"wfh\"\n                      checked={searchOptions.jobType.wfh}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Work From Home\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"internship\"\n                      checked={searchOptions.jobType.internship}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Internship\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"contract\"\n                      checked={searchOptions.jobType.contract}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Contract\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Salary\n            </Grid>\n            <Grid item xs={9}>\n              <Slider\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={(value) => {\n                  return value * (100000 / 100);\n                }}\n                marks={[\n                  { value: 0, label: \"0\" },\n                  { value: 100, label: \"100000\" },\n                ]}\n                value={searchOptions.salary}\n                onChange={(event, value) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    salary: value,\n                  })\n                }\n              />\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Show Results\n            </Grid>\n            <Grid item xs={9}>\n              <Slider\n                aria-label=\"Small steps\"\n                defaultValue={searchOptions.NumberofResults}\n                getAriaValueText={0}\n                step={1}\n                marks\n                min={1}\n                max={100}\n                valueLabelDisplay=\"auto\"\n                onChange={(event, value) => {\n                  setSearchOptions({\n                    ...searchOptions,\n                    NumberofResults: value,\n                  });\n                }}\n              />\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Duration\n            </Grid>\n            <Grid item xs={9}>\n              <TextField\n                select\n                label=\"Duration\"\n                variant=\"outlined\"\n                fullWidth\n                value={searchOptions.duration}\n                onChange={(event) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    duration: event.target.value,\n                  })\n                }\n              >\n                <MenuItem value=\"0\">All</MenuItem>\n                <MenuItem value=\"1\">1</MenuItem>\n                <MenuItem value=\"2\">2</MenuItem>\n                <MenuItem value=\"3\">3</MenuItem>\n                <MenuItem value=\"4\">4</MenuItem>\n                <MenuItem value=\"5\">5</MenuItem>\n                <MenuItem value=\"6\">6</MenuItem>\n                <MenuItem value=\"7\">7</MenuItem>\n              </TextField>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"salary\"\n                    checked={searchOptions.sort.salary.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"salary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"salary\">\n                    <Typography>Salary</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.salary.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            desc: !searchOptions.sort.salary.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.salary.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"duration\"\n                    checked={searchOptions.sort.duration.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"duration\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"duration\">\n                    <Typography>Duration</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.duration.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            desc: !searchOptions.sort.duration.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.duration.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort.rating.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.rating.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            desc: !searchOptions.sort.rating.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.rating.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst Home = (props) => {\n  const [jobs, setJobs] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    query: \"\",\n    jobType: {\n      fullTime: false,\n      partTime: false,\n      wfh: false,\n      internship: false,\n      contract: false,\n    },\n    salary: [0, 100],\n    NumberofResults: 100,\n    duration: \"0\",\n    sort: {\n      salary: {\n        status: false,\n        desc: false,\n      },\n      duration: {\n        status: false,\n        desc: false,\n      },\n      rating: {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  const setPopup = useContext(SetPopupContext);\n  useEffect(() => {\n    getData();\n    getUser();\n  }, []);\n\n  const getData = () => {\n    let searchParams = [];\n    if (searchOptions.query !== \"\") {\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\n    }\n    if (searchOptions.jobType.fullTime) {\n      searchParams = [...searchParams, `jobType=Full%20Time`];\n    }\n    if (searchOptions.jobType.partTime) {\n      searchParams = [...searchParams, `jobType=Part%20Time`];\n    }\n    if (searchOptions.jobType.wfh) {\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\n    }\n    if (searchOptions.jobType.internship) {\n      searchParams = [...searchParams, `jobType=Internship`];\n    }\n    if (searchOptions.jobType.contract) {\n      searchParams = [...searchParams, `jobType=Contract`];\n    }\n    if (searchOptions.salary[0] != 0) {\n      searchParams = [\n        ...searchParams,\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\n        `salaryMax=${searchOptions.salary[1] * 1000}`\n      ];\n    }\n    if (searchOptions.salary[1] != 100) {\n      \n      searchParams = [\n        ...searchParams,\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\n        `salaryMax=${searchOptions.salary[1] * 1000}`\n      ];\n    }\n    if (searchOptions.duration != \"0\") {\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\n    }\n    if (searchOptions.NumberofResults != 100) {\n      searchParams = [...searchParams, `NumberOfResults=${searchOptions.NumberofResults}`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    // console.log(queryString);\n    let address = apiList.jobs;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        //  console.log(response.data);\n        setJobs(\n          response.data.filter((obj) => {\n            const today = new Date();\n            const deadline = new Date(obj.deadline);\n            return deadline > today;\n          })\n        );\n      })\n      .catch((err) => {\n        //  console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  const [apply, setapply] = useState(true);\n  const [userData, setData] = useState({\n    mail:\"\",\n    name:\"\"\n  });\n\n  const getUser = () => {\n    axios\n      .get(apiList.user, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        if (\n          response.data.name === \"\" ||\n          response.data.education === [] ||\n          response.data.skill === [] ||\n          response.data.resume === \"\" ||\n          response.data.profile === \"\" ||\n          response.data.address === \"\" ||\n          response.data.contactNumber === \"\"\n        ) {\n          // console.log(\"checking\")\n          setapply(false);\n        }\n        setData({mail:response.data.email, name:response.data.name})\n      })\n      .catch((err) => {\n        // console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error xxx\",\n        });\n      });\n  };\n\n  const serchRefresh = (event) => {\n    setSearchOptions({\n      ...searchOptions,\n      query: event.target.value,\n    });\n    // console.log(event.target.value)\n    getData();\n  };\n\n  const [totalJobs, setTotal]=useState(jobs.length)\n\n  if(totalJobs<jobs.length){\n    setTotal(jobs.length)\n  }\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid\n          item\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item xs>\n            <Typography variant=\"h2\">Jobs</Typography>\n          </Grid>\n          <Grid item xs>\n            <TextField\n              label=\"Search Jobs\"\n              value={searchOptions.query}\n              onChange={(event) => serchRefresh(event)}\n              onKeyPress={(ev) => {\n                if (ev.key === \"Enter\") {\n                  getData();\n                }\n              }}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment>\n                    <IconButton onClick={() => getData()}>\n                      <SearchIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n              style={{ width: \"500px\" }}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item>\n            <IconButton onClick={() => setFilterOpen(true)}>\n              <FilterListIcon />\n            </IconButton>\n          </Grid>\n          <Grid item xs>\n            <Typography variant=\"h5\">\n              showing{\" \"}\n              {searchOptions.NumberofResults > jobs.length\n                ? jobs.length\n                : searchOptions.NumberofResults}{\" \"}\n              of {totalJobs} jobs\n            </Typography>\n          </Grid>\n        </Grid>\n\n        <Grid\n          container\n          item\n          xs\n          direction=\"column\"\n          alignItems=\"stretch\"\n          justify=\"center\"\n        >\n          {jobs.length > 0 ? (\n            jobs.map((job) => {\n              return <JobTile job={job} apply={apply} userMail={userData.mail} userName={userData.name} />;\n            })\n          ) : (\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n              No jobs found\n            </Typography>\n          )}\n        </Grid>\n        {/* <Grid item>\n          <Pagination count={10} color=\"primary\" />\n        </Grid> */}\n      </Grid>\n      <FilterPopup\n        open={filterOpen}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        handleClose={() => setFilterOpen(false)}\n        getData={() => {\n          getData();\n          setFilterOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nexport default Home;\n","D:\\job-portal-main\\frontend\\src\\component\\Profile.js",["269","270","271","272","273","274","275","276"],"import { Profiler, useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  Typography,\n  Modal,\n  Paper,\n  makeStyles,\n  TextField,\n  Avatar,\n} from \"@material-ui/core\";\nimport Progressbar from \"./progressbar\";\nimport axios from \"axios\";\nimport ChipInput from \"material-ui-chip-input\";\nimport FileUploadInput from \"../lib/FileUploadInput\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport FaceIcon from \"@material-ui/icons/Face\";\nimport { SetPopupContext } from \"../App\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/material.css\";\n\nimport apiList, { server } from \"../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    // padding: \"30px\",\n  },\n  avatar: {\n    width: theme.spacing(17),\n    height: theme.spacing(17),\n  },\n}));\n\nconst MultifieldInput = (props) => {\n  const classes = useStyles();\n  const { education, setEducation } = props;\n\n  return (\n    <>\n      {education.map((obj, key) => (\n        <Grid item container className={classes.inputBox} key={key}>\n          <Grid item xs={6}>\n            <TextField\n              label={`Ecucation  #${key + 1}`}\n              value={education[key].institutionName}\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].institutionName = event.target.value;\n                setEducation(newEdu);\n              }}\n              variant=\"outlined\"\n              fullWidth\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"Start Year\"\n              value={obj.startYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].startYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"End Year\"\n              value={obj.endYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].endYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n        </Grid>\n      ))}\n      <Grid item style={{ alignSelf: \"center\" }}>\n        <Button\n          variant=\"contained\"\n          style={{\n            background: \"#088475\",\n            color: \"white\",\n          }}\n          onClick={() =>\n            setEducation([\n              ...education,\n              {\n                institutionName: \"\",\n                startYear: \"\",\n                endYear: \"\",\n              },\n            ])\n          }\n          className={classes.inputBox}\n        >\n          Add another institution details\n        </Button>\n      </Grid>\n    </>\n  );\n};\n\nconst Profile = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n  const [userData, setUserData] = useState();\n  const [open, setOpen] = useState(false);\n\n  const [profileDetails, setProfileDetails] = useState({\n    name: \"\",\n    education: [],\n    skills: [],\n    resume: \"\",\n    profile: \"\",\n    MyAddress: \"\",\n    contactNumber: \"\",\n    email: \"\",\n  });\n  const [progress, setprogress] = useState(0);\n\n  const [education, setEducation] = useState([\n    {\n      institutionName: \"\",\n      startYear: \"\",\n      endYear: \"\",\n    },\n  ]);\n  const [phone, setPhone] = useState(\"\");\n  const handleInput = (key, value) => {\n    setProfileDetails({\n      ...profileDetails,\n      [key]: value,\n    });\n    progresupdae();\n  };\n\n  useEffect(() => {\n    getData()\n  }, []);\n\n  const getData = () => {\n    axios\n      .get(apiList.user, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setProfileDetails(response.data);\n        setPhone(response.data.contactNumber)\n        if (response.data.education.length > 0) {\n          setEducation(\n            response.data.education.map((edu) => ({\n              institutionName: edu.institutionName ? edu.institutionName : \"\",\n              startYear: edu.startYear ? edu.startYear : \"\",\n              endYear: edu.endYear ? edu.endYear : \"\",\n            }))\n          );\n        }\n        \n      })\n      .catch((err) => {\n        //console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  const progresupdae = () => {\n    let count = 0;\n    if (profileDetails.name.length > 1) {\n      count += 12.5;\n    }\n    //console.log(profileDetails.name);\n    if (profileDetails.contactNumber !== \"\") count += 12.5;\n    //console.log(profileDetails.contactNumber);\n    if (profileDetails.email !== \"\") count += 12.5;\n    //console.log(profileDetails.email);\n    if (profileDetails.MyAddress !== \"\") count += 12.5;\n    //console.log(profileDetails.MyAddress);\n    if (profileDetails.education !== []) count += 12.5;\n    //console.log(profileDetails.education);\n    if (profileDetails.skills !== []) count += 12.5;\n    //console.log(profileDetails.skills);\n    if (profileDetails.resume !== \"\") count += 12.5;\n    //console.log(profileDetails.resume);\n    if (profileDetails.profile !== \"\") count += 12.5;\n    //console.log(profileDetails.profile);\n\n    setTimeout(() => {\n      setprogress(count);\n    }, 1000);\n    \n  };\n\n  progresupdae()\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const editDetails = () => {\n    setOpen(true);\n  };\n\n  const handleUpdate = () => {\n    ////console.log(education);\n\n    let updatedDetails = {\n      ...profileDetails,\n      education: education\n        .filter((obj) => obj.institutionName.trim() !== \"\")\n        .map((obj) => {\n          if (obj[\"endYear\"] === \"\") {\n            delete obj[\"endYear\"];\n          }\n          return obj;\n        }),\n    };\n\n    if (phone !== \"\") {\n      \n      updatedDetails = {\n        ...updatedDetails,\n        contactNumber: `+${phone}`,\n      };\n    } else {\n      updatedDetails = {\n        ...updatedDetails,\n        contactNumber: \"\",\n      };\n    }\n    //alert(updatedDetails)\n    axios\n      .put(apiList.user, updatedDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        //console.log(err.response);\n      });\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid item>\n          <Typography variant=\"h2\">Profile</Typography>\n        </Grid>\n        <Grid item xs>\n          <Paper\n            style={{\n              padding: \"20px\",\n              outline: \"none\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <Grid\n              container\n              direction=\"column\"\n              alignItems=\"stretch\"\n              spacing={3}\n              style={{ display: \"flex\" }}\n            >\n              <Typography style={{ alignSelf: \"center\" }}>\n                Profile progress {progress}%\n              </Typography>\n              <Progressbar value={progress} />\n              <Grid\n                item\n                direction=\"row\"\n                alignItems=\"stretch\"\n                spacing={3}\n                style={{ display: \"flex\" }}\n              >\n                <Grid item style={{ paddingTop: \"10px\", paddingRight: \"10px\" }}>\n                  <Avatar\n                    src={`${server}${profileDetails.profile}`}\n                    className={classes.avatar}\n                  />\n                </Grid>\n\n                <Grid\n                  container\n                  direction=\"column\"\n                  alignItems=\"stretch\"\n                  spacing={3}\n                  style={{ display: \"flex\" }}\n                >\n                  <Grid item>\n                    <TextField\n                      label=\"Name\"\n                      value={profileDetails.name}\n                      onChange={(event) =>\n                        handleInput(\"name\", event.target.value)\n                      }\n                      className={classes.inputBox}\n                      variant=\"outlined\"\n                      fullWidth\n                    />\n                  </Grid>\n                  <Grid item>\n                  <PhoneInput\n                  country={\"pk\"}\n                  value={phone}\n                  onChange={(phone) => setPhone(phone)}\n                  style={{ width: \"auto\" }}\n                />\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item>\n                <TextField\n                  label=\"E-mail\"\n                  value={profileDetails.email}\n                  disabled={true}\n                  className={classes.inputBox}\n                  variant=\"outlined\"\n                  fullWidth\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  label=\"Address\"\n                  value={profileDetails.MyAddress}\n                  onChange={(event) =>\n                    handleInput(\"MyAddress\", event.target.value)\n                  }\n                  className={classes.inputBox}\n                  variant=\"outlined\"\n                  fullWidth\n                />\n              </Grid>\n              <MultifieldInput\n                education={education}\n                setEducation={setEducation}\n              />\n              <Grid item>\n                <ChipInput\n                  className={classes.inputBox}\n                  label=\"Skills\"\n                  variant=\"outlined\"\n                  helperText=\"Press enter to add skills\"\n                  value={profileDetails.skills}\n                  onAdd={(chip) =>\n                    setProfileDetails({\n                      ...profileDetails,\n                      skills: [...profileDetails.skills, chip],\n                    })\n                  }\n                  onDelete={(chip, index) => {\n                    let skills = profileDetails.skills;\n                    skills.splice(index, 1);\n                    setProfileDetails({\n                      ...profileDetails,\n                      skills: skills,\n                    });\n                  }}\n                  fullWidth\n                />\n              </Grid>\n              <Grid item>\n                <FileUploadInput\n                  className={classes.inputBox}\n                  label=\"Resume (.pdf)\"\n                  icon={<DescriptionIcon />}\n                  uploadTo={apiList.uploadResume}\n                  handleInput={handleInput}\n                  identifier={\"resume\"}\n                />\n              </Grid>\n              <Grid item>\n                <FileUploadInput\n                  className={classes.inputBox}\n                  label=\"Profile Photo (.jpg/.png)\"\n                  icon={<FaceIcon />}\n                  uploadTo={apiList.uploadProfileImage}\n                  handleInput={handleInput}\n                  identifier={\"profile\"}\n                />\n              </Grid>\n            </Grid>\n            <Button\n              variant=\"contained\"\n              style={{\n                background: \"#088475\",\n                color: \"white\",\n                padding: \"10px 50px\",\n                marginTop: \"30px\",\n              }}\n              onClick={() => handleUpdate()}\n            >\n              Update Details\n            </Button>\n          </Paper>\n        </Grid>\n      </Grid>\n      {/* <Modal open={open} onClose={handleClose} className={classes.popupDialog}> */}\n\n      {/* </Modal> */}\n    </>\n  );\n};\n\nexport default Profile;\n","D:\\job-portal-main\\frontend\\src\\component\\recruiter\\CreateJobs.js",["277","278","279"],"import { useContext, useEffect, useState } from \"react\";\nimport * as React from \"react\";\nimport {\n  Button,\n  Grid,\n  Typography,\n  Modal,\n  Paper,\n  makeStyles,\n  TextField,\n  MenuItem,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport ChipInput from \"material-ui-chip-input\";\nimport Autocomplete, {\n  createFilterOptions,\n} from \"@material-ui/lab/Autocomplete\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList from \"../../lib/apiList\";\n\nconst filter = createFilterOptions();\nconst allJobs = [\n  \"Account Officer\",\n  \"Accountant\",\n  \"ACE\",\n  \"ACE (Projects)\",\n  \"ACE (Services)\",\n  \"ACRO\",\n  \"Admin Coordinator\",\n  \"Admin Officer\",\n  \"Administrator Human Resources\",\n  \"Advisor (Business Development)\",\n  \"Advisor (Real Estate)\",\n  \"Account  Admin Officer\",\n  \"Advisor to CE\",\n  \"Aerobics Instructor\",\n  \"AMS Officer\",\n  \"Anesthetist\",\n  \"Asphalt Plant Labor\",\n  \"Asphalt Plant Operator\",\n  \"Assistant\",\n  \"Assistant AMS Officer\",\n  \"Assistant Blasting\",\n  \"Assistant Business Development\",\n  \"Assistant Cardiac Surgeon\",\n  \"Assistant Dental\",\n  \"Assistant Despatch Clerk\",\n  \"Assistant Dispatch\",\n  \"Assistant Electrical Engineer\",\n  \"Assistant Horticulture\",\n  \"Assistant Legal Advisor\",\n  \"Assistant Manager (Banking  Financ\",\n  \"Assistant Manager Account\",\n  \"Assistant Manager Audit\",\n  \"Assistant Manager Banquet\",\n  \"Assistant Manager Building Control\",\n  \"Assistant Manager Contracts\",\n  \"Assistant Manager Data Center\",\n  \"Assistant Manager Finance\",\n  \"Assistant Manager GR\",\n  \"Assistant Manager Horticulture\",\n  \"Assistant Manager HR\",\n  \"Assistant Manager Maintenance\",\n  \"Assistant Manager Marketing\",\n  \"Assistant Manager PR\",\n  \"Assistant Manager Purchase\",\n  \"Assistant Manager Security\",\n  \"Assistant Manager Transport\",\n  \"Assistant Manager Water Supply\",\n  \"Assistant OT\",\n  \"Assistant Patwari\",\n  \"Assistant Purchaser\",\n  \"Assistant QA\",\n  \"Assistant QC\",\n  \"Assistant Quantity Engineer\",\n  \"Assistant Sale Manager\",\n  \"Assistant Site Engineer\",\n  \"Assistant Structure Engineer\",\n  \"Assistant Supervisor Maintenance\",\n  \"Assistant Surveyor\",\n  \"Assistant Technical\",\n  \"Assistant Town Planner\",\n  \"Assistant Vet\",\n  \"Assistant Visa Officer\",\n  \"Assistant Warehouse\",\n  \"Assistants Manager Construction\",\n  \"Asstt Admin Officer\",\n  \"Asstt. Auditor\",\n  \"Asstt. Despatch/Record Clerk\",\n  \"Asstt. Law Officer\",\n  \"Asstt. Legal Advisor\",\n  \"Asstt. Manager\",\n  \"Asstt. Manager (Admin  Coord)\",\n  \"Asstt. Manager (Admin and Ops)\",\n  \"Asstt. Manager (Admin)\",\n  \"Asstt. Manager (CR)\",\n  \"Asstt. Manager (CS)\",\n  \"Asstt. Manager (Customer Relations)\",\n  \"Asstt. Manager (Finance)\",\n  \"Asstt. Manager (Marketing)\",\n  \"Asstt. Manager Accounts\",\n  \"Asstt. Manager Business Technology\",\n  \"Asstt. Manager Internal Audit\",\n  \"Asstt. Manager Land\",\n  \"Asstt. Manager Records\",\n  \"Asstt. Network Administrator\",\n  \"Asstt. OIC/R\",\n  \"Asstt. Project Manager\",\n  \"Asstt. Record Keeper\",\n  \"Audit Internship\",\n  \"Audit Officer\",\n  \"Auditor\",\n  \"Auto Electrician\",\n  \"AutoCad Operator\",\n  \"AV Support Executive\",\n  \"Aviation\",\n  \"Baker\",\n  \"Baker II\",\n  \"Banquet Chef\",\n  \"Barber\",\n  \"BBQ Cook\",\n  \"Beautician\",\n  \"Billing Clerk\",\n  \"Blasting Foreman\",\n  \"Bouncer\",\n  \"Brand Manager\",\n  \"Broomer Fitter\",\n  \"Building Inspector\",\n  \"Bus Conductor\",\n  \"Business Development Executive\",\n  \"Business Technology Manager\",\n  \"CAD Designer\",\n  \"CAD Operator\",\n  \"Cardiac Surgeon\",\n  \"Carpenter\",\n  \"CCTV\",\n  \"Cement Mixer\",\n  \"CFO\",\n  \"Chairman\",\n  \"Chapatti Maker\",\n  \"Checkout Manager\",\n  \"Checkout Manager Female\",\n  \"Chef\",\n  \"Chef De Partie\",\n  \"Chemistry Teacher\",\n  \"Chief Architect\",\n  \"Chief Executive\",\n  \"Chief Surveyor\",\n  \"Civil Engineer\",\n  \"Cleaning Supervisor\",\n  \"Clerk\",\n  \"Commis\",\n  \"Complaint Attendant\",\n  \"Computer Operator cum Accountant\",\n  \"CONSTRUCTION MANAGER\",\n  \"Consultant\",\n  \"Consultant / Advisor\",\n  \"Consultant Radiologist\",\n  \"Continental Chef\",\n  \"Controller Examination\",\n  \"Cook\",\n  \"Coordinating Officer\",\n  \"Coordinator\",\n  \"Coordinator Admin\",\n  \"Coordinator Admin  Ops\",\n  \"Coordinator Services\",\n  \"Cost Controller\",\n  \"Counter Person\",\n  \"Crane Operator\",\n  \"CRO\",\n  \"Data Analyst\",\n  \"Data Entry Operator\",\n  \"DCE\",\n  \"Dentist\",\n  \"Deputy Manager (Finance  Accounts)\",\n  \"Deputy Manager CR\",\n  \"Deputy Manager Finance\",\n  \"Deputy Manager HR\",\n  \"Deputy Manager Records\",\n  \"Design Engineer\",\n  \"Despatch Rider\",\n  \"Diesel Man\",\n  \"Director Academics\",\n  \"Director Engineering\",\n  \"Director Land\",\n  \"Dispenser\",\n  \"Dog Handler\",\n  \"Dog Helper\",\n  \"Dozer Operater\",\n  \"Drill Operator\",\n  \"Driver\",\n  \"Driver Bowzer\",\n  \"Driver Bus\",\n  \"Driver Dumper\",\n  \"Driver Excavator\",\n  \"Driver HTV\",\n  \"Driver LTV\",\n  \"Driver TM\",\n  \"Dy. Manager (Accounts)\",\n  \"Earth Work Foreman\",\n  \"Elecrical Engineer\",\n  \"Elecrical Engineer\",\n  \"Elecrical Engineer\",\n  \"Elecrical Engineer\",\n  \"Elecrical Engineer\",\n  \"Elecrical Engineer\",\n  \"Environmental Engineer\",\n  \"Excavator Operator\",\n  \"Exchange Technician\",\n  \"Executive Chef\",\n  \"Executive Coordinator\",\n  \"Executive Coordinator to VCE\",\n  \"Executive Protection Officer\",\n  \"Executive Secretary\",\n  \"Executive Usher\",\n  \"Field Officer\",\n  \"Finance Officer\",\n  \"Financial Advisor\",\n  \"Fireman\",\n  \"Fitte\",\n  \"Food And Beverage Manager\",\n  \"Foreign Teacher\",\n  \"Front Desk Officer\",\n  \"Front Desk Officer\",\n  \"Garbage Collector\",\n  \"Gardener\",\n  \"General Manager Buildings and Infra\",\n  \"General Surgeon\",\n  \"Generator Operator\",\n  \"Geologist\",\n  \"GM (Coord  PR)\",\n  \"GM (F)\",\n  \"GM (Joint Venture Projects)\",\n  \"GM (Marketing) North\",\n  \"GM (Ops)\",\n  \"GM (Rec)\",\n  \"GM Business Development (DHA Affair\",\n  \"GM Coord / Land\",\n  \"GM CR\",\n  \"GM IT\",\n  \"GM Transfer\",\n  \"Golf Attendant\",\n  \"Grader Operator\",\n  \"GRO Female\",\n  \"Groomer\",\n  \"Group Marketing Head\",\n  \"Guide\",\n  \"Gunman\",\n  \"Gym Instructor\",\n  \"Hair Stylist\",\n  \"Head Admin\",\n  \"Head Asset Management\",\n  \"Head Coordination\",\n  \"Head Education\",\n  \"Head Government Relations\",\n  \"Head of Human Resources\",\n  \"Head of IT\",\n  \"Head Operation\",\n  \"Head PR\",\n  \"Head Projects Development\",\n  \"Head Waiter\",\n  \"Help Desk Analyst\",\n  \"Helper\",\n  \"Helper AC Technician\",\n  \"Helper Auto Electrician\",\n  \"Helper Batching Plant\",\n  \"Helper BBQ\",\n  \"Helper Boring Machine\",\n  \"Helper Bowzer\",\n  \"Helper Carpenter\",\n  \"Helper Cement\",\n  \"Helper Cook\",\n  \"Helper Crane\",\n  \"Helper Crush Plant\",\n  \"Helper Drill\",\n  \"Helper Dumper\",\n  \"Helper Electrician\",\n  \"Helper Excavator\",\n  \"Helper Generator\",\n  \"Helper Grader\",\n  \"Helper Hydraulic Mechanic\",\n  \"Helper Lab\",\n  \"Helper Mason\",\n  \"Helper Mechanic\",\n  \"Helper Mess\",\n  \"Helper Painter\",\n  \"Helper Paver\",\n  \"Helper Plumber\",\n  \"Helper Roller\",\n  \"Helper Store\",\n  \"Helper Surveyor\",\n  \"Helper Technician\",\n  \"Helper TM\",\n  \"Helper Welder\",\n  \"Helper Zoo\",\n  \"History Teacher\",\n  \"Horticulture\",\n  \"Horticulturist\",\n  \"Hotel Hostess\",\n  \"House Attendant\",\n  \"House Keeping Supervisor\",\n  \"HR Assistant\",\n  \"HR Executive\",\n  \"HR Executive Hospital\",\n  \"HR generalist\",\n  \"HR Intern\",\n  \"HR Intern\",\n  \"HR Officer\",\n  \"HR Officer\",\n  \"HR Officer\",\n  \"Hydraulic Mechanic\",\n  \"I.T Site Coordinator\",\n  \"Imam Masjid\",\n  \"In charge ICU\",\n  \"In charge Labor\",\n  \"Incharge Operations (North)\",\n  \"Incharge Trainee\",\n  \"Internship\",\n  \"Internship IT Networking\",\n  \"IT Assistant\",\n  \"IT Help Desk Analyst\",\n  \"IT Manager\",\n  \"IT Officer\",\n  \"IT Technician\",\n  \"Italian Chef\",\n  \"Jr Infrastructure Engineer\",\n  \"Junior Steward\",\n  \"Kitchen Helper\",\n  \"Kitchen Incharge\",\n  \"KPO\",\n  \"Lab Engineer and Lab Assistant\",\n  \"Land Revenue Assistant\",\n  \"Law Assistant\",\n  \"Law Officer\",\n  \"Lecturer\",\n  \"Legal Advisor\",\n  \"Legal Consultant\",\n  \"Librarian\",\n  \"Lift Operator\",\n  \"Loader\",\n  \"Logistics Admin\",\n  \"Lotus Support Officer\",\n  \"Lubricator\",\n  \"Magazine Guard\",\n  \"Maintenance Supervisor\",\n  \"Makeup Artist\",\n  \"Management Trainee\",\n  \"Manager (Accounts)\",\n  \"Manager (Marketing)\",\n  \"Manager (Mkt  Ops)\",\n  \"Manager Admin\",\n  \"Manager Admission and Marketing\",\n  \"Manager Audit\",\n  \"Manager Banquet\",\n  \"Manager Building Control\",\n  \"Manager Business Development\",\n  \"Manager Construction\",\n  \"Manager Contracts\",\n  \"Manager Coordinationn  II\",\n  \"Manager CR\",\n  \"Manager Data Center\",\n  \"Manager Finance\",\n  \"Manager Government Relations\",\n  \"Manager Horticulture\",\n  \"Manager Internal Audit\",\n  \"Manager Land\",\n  \"Manager Maintenance\",\n  \"Manager Networks\",\n  \"Manager PR\",\n  \"Manager Purchase\",\n  \"Manager Records\",\n  \"Manager Revenue Settlement\",\n  \"Manager Security (Land)\",\n  \"Manager Transport\",\n  \"Manager Warehouse\",\n  \"Manager Water Supply\",\n  \"Marketing Assistant\",\n  \"Mason\",\n  \"Mechanic\",\n  \"Mechanical Engineer\",\n  \"Media\",\n  \"Medical Specialist\",\n  \"MEP Engineer\",\n  \"MEP Engineer\",\n  \"Mess Waiter\",\n  \"Meter Reader\",\n  \"Moazan\",\n  \"Music Teacher\",\n  \"Nadra Machine Operator\",\n  \"Nephrologists\",\n  \"Network Administrator\",\n  \"Network Support Exec\",\n  \"Network Support Executive\",\n  \"Night Watchman\",\n  \"Non Linear Editor\",\n  \"Nurses\",\n  \"Office Assistant\",\n  \"Office Cleaner\",\n  \"Office Coordinator\",\n  \"Office Runner\",\n  \"Officer Incharge (Record)\",\n  \"OIC/R\",\n  \"Operator Batching Plant\",\n  \"Operator Bobcat\",\n  \"Operator Boiler\",\n  \"Operator Boring Machine\",\n  \"Operator Crush Plant\",\n  \"Operator Mixture\",\n  \"Operator Paver\",\n  \"Operator Plant\",\n  \"Operator PTR\",\n  \"Operator Pump\",\n  \"PA to VCE\",\n  \"Painter\",\n  \"Pastry Chef\",\n  \"Patwari\",\n  \"Payroll Executive\",\n  \"Perfusionist\",\n  \"Photo Copier Operator\",\n  \"Photocopier\",\n  \"Photocopier Operator\",\n  \"Photographer and Videographer\",\n  \"Photographer plus Videographer\",\n  \"Physiotherapist\",\n  \"Pipe Fitter\",\n  \"Plumber\",\n  \"Principal\",\n  \"Procurement Manager\",\n  \"PROCUREMENT Officer\",\n  \"Programmer\",\n  \"Project Coordinator\",\n  \"Project Manager\",\n  \"Project Manager Buildings and Infra\",\n  \"Project Manager Highrise\",\n  \"PSO to CE\",\n  \"Public Relation Officer\",\n  \"Purchase Officer\",\n  \"QC\",\n  \"Quantity Engineer\",\n  \"Radiographer\",\n  \"Receptionist\",\n  \"Record Assistant\",\n  \"Regional Chief EXECUTIVE\",\n  \"Regional GM (South)\",\n  \"Religious Teacher\",\n  \"Roller Operator\",\n  \"Safety Engineer\",\n  \"Safety Inspector\",\n  \"Sale Manager\",\n  \"Sales Officer\",\n  \"SDO\",\n  \"Security Guard\",\n  \"Security Manager\",\n  \"Security Supervisor\",\n  \"Senior Accounts Officer\",\n  \"Senior Auditor\",\n  \"Senior Chef\",\n  \"Senior Gardener\",\n  \"Senior Key Punch Operator\",\n  \"Senior Manager (Banking Affairs)\",\n  \"Senior Manager Finance\",\n  \"Senior Manager procurement\",\n  \"Senior Manager Purchase\",\n  \"Senior MEP Engineer\",\n  \"Senior Network Administrator\",\n  \"Senior Project Manager\",\n  \"Senior Record Assistant\",\n  \"Senior Resident Engineer\",\n  \"Senior Software Engineer\",\n  \"Senior Steward\",\n  \"Senior Store Keeper\",\n  \"Senior Supervisor Security\",\n  \"Senior Surveyor\",\n  \"Sign Board Fitter\",\n  \"Site Engineer\",\n  \"Site Engineer Civil Engineer\",\n  \"Site Inspector\",\n  \"Site Supervisor\",\n  \"Social Media Blogger\",\n  \"Social Media Manager\",\n  \"Software Engineer\",\n  \"Sous Chef\",\n  \"Spray Man\",\n  \"Sr Infrastructure Engineer\",\n  \"Sr Land Surveyor\",\n  \"Sr Project Manage Infrastructure\",\n  \"Sr. GM CR\",\n  \"Sr. GM Transfer\",\n  \"Sr. Manager (CR)\",\n  \"Sr. Manager (Ops)\",\n  \"Sr. Manager ICT\",\n  \"Sr. Sorfware Engineer\",\n  \"SSA\",\n  \"SSG Commando\",\n  \"Staff Nurse\",\n  \"Steel Fixer\",\n  \"Steno typist\",\n  \"Steward\",\n  \"STORE KEEPER\",\n  \"Sub Engineer\",\n  \"Superintendent\",\n  \"Supervisor\",\n  \"Supervisor Cleaning\",\n  \"Supervisor CSSD\",\n  \"Supervisor Dumping\",\n  \"Supervisor Gardener\",\n  \"Supervisor Gas\",\n  \"Supervisor House Keeping\",\n  \"Supervisor Intelligence\",\n  \"Supervisor Lab\",\n  \"Supervisor Material\",\n  \"Supervisor Mess\",\n  \"Supervisor Plumbing\",\n  \"Supervisor Transport\",\n  \"Supervisor Water Supply\",\n  \"Supervisor Workshop\",\n  \"Supply Chain Manager\",\n  \"Support Officer\",\n  \"Surveillance Assistant\",\n  \"Surveyor\",\n  \"Surveyor\",\n  \"Surveyor\",\n  \"Surveyor\",\n  \"Surveyor\",\n  \"Surveyor\",\n  \"Sweeper\",\n  \"Sweet Maker\",\n  \"Swimming Instructor\",\n  \"Swimming Instructor\",\n  \"Swimming Instructor Assistant\",\n  \"System Administrator\",\n  \"System Engineer\",\n  \"Tailor\",\n  \"Tandoorchi\",\n  \"Teacher\",\n  \"Teacher Assistant\",\n  \"Team Lead Surveillance\",\n  \"Technical Assistant\",\n  \"Technical Officer\",\n  \"Technician\",\n  \"Technician AC\",\n  \"Technician Bio Med\",\n  \"Technician CT Scan\",\n  \"Technician Dialysis\",\n  \"Technician ETT\",\n  \"Technician Lab\",\n  \"Technician XRay\",\n  \"Telephone Operator\",\n  \"Test by Babur\",\n  \"Test To Be Deleted\",\n  \"TestDesignation\",\n  \"Therapist\",\n  \"Ticketing  Visa Assistant\",\n  \"Ticketing Officer\",\n  \"Ticketing Person\",\n  \"Trainee Engineer\",\n  \"VCE (Ops.  Admin)\",\n  \"VCE ProjectsI\",\n  \"VCE ProjectsII\",\n  \"VCE SMG\",\n  \"Veterinary Doctor\",\n  \"Vice Chief Executive\",\n  \"Waiter Male\",\n  \"Waitress Female\",\n  \"Ward Assistant\",\n  \"Ward boy\",\n  \"Watchman\",\n  \"Water Managment\",\n  \"Welder\",\n  \"Wireless Operator\",\n  \"Workshop Department\",\n];\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    // padding: \"30px\",\n  },\n}));\n\nconst CreateJobs = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n\n  const [jobDetails, setJobDetails] = useState({\n    title: \"\",\n    maxApplicants: 10,\n    maxPositions: 10,\n    deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\n      .toISOString()\n      .substr(0, 16),\n    skillsets: [],\n    jobType: \"Full Time\",\n    duration: 0,\n    salary: 0,\n    details: \"\",\n  });\n\n  const handleInput = (key, value) => {\n    console.log(value);\n    if (key === \"maxPositions\") {\n      // requirement of staff\n      if (value > jobDetails.maxApplicants) {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"positions must be smaller then applications\",\n        });\n        /* setJobDetails({\n          ...jobDetails,\n          [key]: jobDetails.maxApplicants,\n        });*/\n      }\n    }\n// damo for pre added skills for job title ace\n    if(key===\"title\"&&value===\"ACE\"){\n      setJobDetails({\n        ...jobDetails,\n        skillsets: [\"1\",\"2\",\"3\"],\n        title:value\n      });\n      return\n    }\n\n    setJobDetails({\n      ...jobDetails,\n      [key]: value,\n    });\n  };\n\n  const handleUpdate = () => {\n    console.log(jobDetails);\n    axios\n      .post(apiList.jobs, jobDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        setJobDetails({\n          title: \"\",\n          maxApplicants: 100,\n          maxPositions: 30,\n          deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\n            .toISOString()\n            .substr(0, 16),\n          skillsets: [],\n          jobType: \"Full Time\",\n          duration: 0,\n          salary: 0,\n        });\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\", width: \"\" }}\n      >\n        <Grid item>\n          <Typography variant=\"h2\">Add Job</Typography>\n        </Grid>\n        <Grid item container xs direction=\"column\" justify=\"center\">\n          <Grid item>\n            <Paper\n              style={{\n                padding: \"20px\",\n                outline: \"none\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <Grid\n                container\n                direction=\"column\"\n                alignItems=\"stretch\"\n                spacing={3}\n              >\n                <Grid item>\n                  <Autocomplete\n                    value={jobDetails.title}\n                    onChange={(event, newValue) => {\n                      if (typeof newValue === \"string\") {\n                        handleInput(\"title\", newValue);\n                      } else if (newValue && newValue.inputValue) {\n                        // Create a new value from the user input\n                        handleInput(\"title\", newValue.inputValue);\n                      } else {\n                        handleInput(\"title\", newValue);\n                      }\n                    }}\n                    filterOptions={(options, params) => {\n                      const filtered = filter(options, params);\n\n                      const { inputValue } = params;\n                      // Suggest the creation of a new value\n                      const isExisting = options.some(\n                        (option) => inputValue === option\n                      );\n                      if (inputValue !== \"\" && !isExisting) {\n                        filtered.push(`${inputValue}`);\n                      }\n\n                      return filtered;\n                    }}\n                    selectOnFocus\n                    clearOnBlur\n                    handleHomeEndKeys\n                    id=\"Job Title\"\n                    options={allJobs}\n                    getOptionLabel={(option) => option}\n                    freeSolo\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        label=\"Job Title\"\n                        variant=\"outlined\"\n                      />\n                    )}\n                  />\n                </Grid>\n                <Grid item>\n                  <ChipInput\n                    className={classes.inputBox}\n                    label=\"Skills required\"\n                    variant=\"outlined\"\n                    helperText=\"Press enter to add skills\"\n                    value={jobDetails.skillsets}\n                    onAdd={(chip) =>\n                      setJobDetails({\n                        ...jobDetails,\n                        skillsets: [...jobDetails.skillsets, chip],\n                      })\n                    }\n                    onDelete={(chip, index) => {\n                      let skillsets = jobDetails.skillsets;\n                      skillsets.splice(index, 1);\n                      setJobDetails({\n                        ...jobDetails,\n                        skillsets: skillsets,\n                      });\n                    }}\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField\n                    select\n                    label=\"Job Type\"\n                    variant=\"outlined\"\n                    value={jobDetails.jobType}\n                    onChange={(event) => {\n                      handleInput(\"jobType\", event.target.value);\n                    }}\n                    fullWidth\n                  >\n                    <MenuItem value=\"Full Time\">Full Time</MenuItem>\n                    <MenuItem value=\"Part Time\">Part Time</MenuItem>\n                    <MenuItem value=\"Remote\">Remote</MenuItem>\n                    <MenuItem value=\"Contract\">Contract</MenuItem>\n                    <MenuItem value=\"Internship\">Internship</MenuItem>\n                  </TextField>\n                </Grid>\n                <Grid item>\n                  <TextField\n                    select\n                    label=\"Experience\"\n                    variant=\"outlined\"\n                    value={jobDetails.duration}\n                    onChange={(event) => {\n                      handleInput(\"duration\", event.target.value);\n                    }}\n                    fullWidth\n                  >\n                    <MenuItem value={0}>Fresh</MenuItem>\n                    <MenuItem value={1}>1 year</MenuItem>\n                    <MenuItem value={2}>2 years</MenuItem>\n                    <MenuItem value={3}>3 years</MenuItem>\n                    <MenuItem value={4}>4 years</MenuItem>\n                    <MenuItem value={5}>5 years</MenuItem>\n                    <MenuItem value={6}>6 years</MenuItem>\n                  </TextField>\n                </Grid>\n                <Grid item>\n                  <TextField\n                    label=\"Salary\"\n                    variant=\"outlined\"\n                    type=\"number\"\n                    value={jobDetails.salary}\n                    onChange={(event) => {\n                      handleInput(\"salary\", event.target.value);\n                    }}\n                    onScrollCapture={false}\n                    InputProps={{ inputProps: { min: 0 } }}\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField\n                    label=\"Application Deadline\"\n                    type=\"datetime-local\"\n                    value={jobDetails.deadline}\n                    onChange={(event) => {\n                      handleInput(\"deadline\", event.target.value);\n                    }}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField\n                    label=\"Maximum Number Of Applicants\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={jobDetails.maxApplicants}\n                    onChange={(event) => {\n                      handleInput(\"maxApplicants\", event.target.value);\n                    }}\n                    InputProps={{ inputProps: { min: 1 } }}\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField\n                    label=\"Positions Available\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={jobDetails.maxPositions}\n                    onChange={(event) => {\n                      handleInput(\"maxPositions\", event.target.value);\n                    }}\n                    InputProps={{ inputProps: { min: 1 } }}\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField\n                    label=\"Details (upto 300 words)\"\n                    multiline\n                    rows={8}\n                    style={{ width: \"100%\" }}\n                    variant=\"outlined\"\n                    value={jobDetails.details}\n                    onChange={(event) => {\n                      if (\n                        event.target.value.split(\" \").filter(function (n) {\n                          return n != \"\";\n                        }).length <= 300\n                      ) {\n                        handleInput(\"details\", event.target.value);\n                      }\n                    }}\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\n                onClick={() => handleUpdate()}\n              >\n                Create Job\n              </Button>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default CreateJobs;\n","D:\\job-portal-main\\frontend\\src\\component\\recruiter\\MyJobs.js",["280","281","282","283","284","285"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Checkbox,\n} from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport axios from \"axios\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  button: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n}));\n\nconst JobTile = (props) => {\n  const classes = useStyles();\n  let history = useHistory();\n  const { job, getData } = props;\n  const setPopup = useContext(SetPopupContext);\n\n  const [open, setOpen] = useState(false);\n  const [openUpdate, setOpenUpdate] = useState(false);\n  const [jobDetails, setJobDetails] = useState(job);\n  const [NumberOfApplicant, setNumber] = useState(0);\n\n  const countApplicants = () => {\n    let addressY = `${apiList.applicants}?jobId=${job._id}`;\n    axios\n      .get(addressY, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        // console.log(response.data);\n        setNumber(response.data.length);\n      })\n      .catch((err) => {\n        console.log(err.response);\n        /* console.log(err.response.data);\n      setApplications([]);\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: err.response.data.message,\n      });\n      */\n      });\n  };\n  countApplicants();\n\n  //console.log(jobDetails);\n\n  const handleInput = (key, value) => {\n    setJobDetails({\n      ...jobDetails,\n      [key]: value,\n    });\n  };\n\n  const handleClick = (location) => {\n    history.push(location);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleCloseUpdate = () => {\n    setOpenUpdate(false);\n  };\n\n  const handleDelete = () => {\n    console.log(job._id);\n    axios\n      .delete(`${apiList.jobs}/${job._id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n        handleClose();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleClose();\n      });\n  };\n\n  const handleJobUpdate = () => {\n    axios\n      .put(`${apiList.jobs}/${job._id}`, jobDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n        handleCloseUpdate();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleCloseUpdate();\n      });\n  };\n\n  const postedOn = new Date(job.dateOfPosting);\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid container item xs={9} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\">{job.title}</Typography>\n          </Grid>\n          <Grid item>\n            <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\n          </Grid>\n          <Grid item>Role : {job.jobType}</Grid>\n          <Grid item>Salary : Rs/- {job.salary} per month</Grid>\n          <Grid item>\n            Experience :{\" \"}\n            {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\n          </Grid>\n          <Grid item>Date Of Posting: {postedOn.toLocaleDateString()}</Grid>\n          <Grid item>Number of Applicants: {job.maxApplicants}</Grid>\n          <Grid item>\n            Remaining Number of Positions:{\" \"}\n            {job.maxPositions - job.acceptedCandidates}\n          </Grid>\n          <Grid item>\n            {job.skillsets.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid>\n        </Grid>\n        <Grid item container direction=\"column\" xs={3}>\n          <Grid item xs>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.statusBlock}\n              onClick={() => handleClick(`/job/applications/${job._id}`)}\n            >\n              <Grid item>\n              <Typography variant=\"body1\" style={{ whiteSpace: \"pre-line\" }}>\n                {\"View Applications\"}\n                {\"\\n\"}\n                {\"Received\"}\n              </Typography>\n              <Typography variant=\"h4\" style={{ whiteSpace: \"pre-line\" }}>\n                {NumberOfApplicant}\n              </Typography>\n              </Grid>\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              className={classes.statusBlock}\n              onClick={() => {\n                setOpenUpdate(true);\n              }}\n              style={{\n                background: \"#FC7A1E\",\n                color: \"#fff\",\n              }}\n            >\n              Update Details\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              className={classes.statusBlock}\n              onClick={() => {\n                setOpen(true);\n              }}\n            >\n              Delete Job\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\n            Are you sure?\n          </Typography>\n          <Grid container justify=\"center\" spacing={5}>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleDelete()}\n              >\n                Delete\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleClose()}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Modal>\n      <Modal\n        open={openUpdate}\n        onClose={handleCloseUpdate}\n        className={classes.popupDialog}\n      >\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\n            Update Details\n          </Typography>\n          <Grid\n            container\n            direction=\"column\"\n            spacing={3}\n            style={{ margin: \"10px\" }}\n          >\n            <Grid item>\n              <TextField\n                label=\"Application Deadline\"\n                type=\"datetime-local\"\n                value={jobDetails.deadline.substr(0, 16)}\n                onChange={(event) => {\n                  handleInput(\"deadline\", event.target.value);\n                }}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant=\"outlined\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"Maximum Number Of Applicants\"\n                type=\"number\"\n                variant=\"outlined\"\n                value={jobDetails.maxApplicants}\n                onChange={(event) => {\n                  handleInput(\"maxApplicants\", event.target.value);\n                }}\n                InputProps={{ inputProps: { min: 1 } }}\n                fullWidth\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"Positions Available\"\n                type=\"number\"\n                variant=\"outlined\"\n                value={jobDetails.maxPositions}\n                onChange={(event) => {\n                  handleInput(\"maxPositions\", event.target.value);\n                }}\n                InputProps={{ inputProps: { min: 1 } }}\n                fullWidth\n              />\n            </Grid>\n          </Grid>\n          <Grid container justify=\"center\" spacing={5}>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleJobUpdate()}\n              >\n                Update\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleCloseUpdate()}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Job Type\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"fullTime\"\n                      checked={searchOptions.jobType.fullTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Full Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"partTime\"\n                      checked={searchOptions.jobType.partTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Part Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"wfh\"\n                      checked={searchOptions.jobType.wfh}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Work From Home\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Salary\n            </Grid>\n            <Grid item xs={9}>\n              <Slider\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={(value) => {\n                  return value * (100000 / 100);\n                }}\n                marks={[\n                  { value: 0, label: \"0\" },\n                  { value: 100, label: \"100000\" },\n                ]}\n                value={searchOptions.salary}\n                onChange={(event, value) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    salary: value,\n                  })\n                }\n              />\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Experience\n            </Grid>\n            <Grid item xs={9}>\n              <TextField\n                select\n                label=\"Duration\"\n                variant=\"outlined\"\n                fullWidth\n                value={searchOptions.duration}\n                onChange={(event) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    duration: event.target.value,\n                  })\n                }\n              >\n                <MenuItem value=\"0\">All</MenuItem>\n                <MenuItem value=\"1\">1</MenuItem>\n                <MenuItem value=\"2\">2</MenuItem>\n                <MenuItem value=\"3\">3</MenuItem>\n                <MenuItem value=\"4\">4</MenuItem>\n                <MenuItem value=\"5\">5</MenuItem>\n                <MenuItem value=\"6\">6</MenuItem>\n                <MenuItem value=\"7\">7</MenuItem>\n              </TextField>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"salary\"\n                    checked={searchOptions.sort.salary.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"salary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"salary\">\n                    <Typography>Salary</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.salary.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            desc: !searchOptions.sort.salary.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.salary.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"duration\"\n                    checked={searchOptions.sort.duration.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"duration\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"duration\">\n                    <Typography>Duration</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.duration.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            desc: !searchOptions.sort.duration.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.duration.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort.rating.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.rating.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            desc: !searchOptions.sort.rating.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.rating.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst MyJobs = (props) => {\n  const [jobs, setJobs] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    query: \"\",\n    jobType: {\n      fullTime: false,\n      partTime: false,\n      wfh: false,\n    },\n    salary: [0, 100],\n    duration: \"0\",\n    sort: {\n      salary: {\n        status: false,\n        desc: false,\n      },\n      duration: {\n        status: false,\n        desc: false,\n      },\n      rating: {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  const setPopup = useContext(SetPopupContext);\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    let searchParams = [`myjobs=1`];\n    if (searchOptions.query !== \"\") {\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\n    }\n    if (searchOptions.jobType.fullTime) {\n      searchParams = [...searchParams, `jobType=Full%20Time`];\n    }\n    if (searchOptions.jobType.partTime) {\n      searchParams = [...searchParams, `jobType=Part%20Time`];\n    }\n    if (searchOptions.jobType.wfh) {\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\n    }\n    if (searchOptions.salary[0] != 0) {\n      searchParams = [\n        ...searchParams,\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\n      ];\n    }\n    if (searchOptions.salary[1] != 100) {\n      searchParams = [\n        ...searchParams,\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\n      ];\n    }\n    if (searchOptions.duration != \"0\") {\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = apiList.jobs;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    console.log(address);\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setJobs(response.data);\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid\n          item\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item xs>\n            <Typography variant=\"h2\">My Jobs</Typography>\n          </Grid>\n          <Grid item xs>\n            <TextField\n              label=\"Search Jobs\"\n              value={searchOptions.query}\n              onChange={(event) =>\n                setSearchOptions({\n                  ...searchOptions,\n                  query: event.target.value,\n                })\n              }\n              onKeyPress={(ev) => {\n                if (ev.key === \"Enter\") {\n                  getData();\n                }\n              }}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment>\n                    <IconButton onClick={() => getData()}>\n                      <SearchIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n              style={{ width: \"500px\" }}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item>\n            <IconButton onClick={() => setFilterOpen(true)}>\n              <FilterListIcon />\n            </IconButton>\n          </Grid>\n        </Grid>\n\n        <Grid\n          container\n          item\n          xs\n          direction=\"column\"\n          alignItems=\"stretch\"\n          justify=\"center\"\n        >\n          {jobs.length > 0 ? (\n            jobs.map((job) => {\n              return <JobTile job={job} getData={getData} />;\n            })\n          ) : (\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n              No jobs found\n            </Typography>\n          )}\n        </Grid>\n      </Grid>\n      <FilterPopup\n        open={filterOpen}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        handleClose={() => setFilterOpen(false)}\n        getData={() => {\n          getData();\n          setFilterOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nexport default MyJobs;\n","D:\\job-portal-main\\frontend\\src\\component\\recruiter\\JobApplications.js",["286","287","288","289","290","291","292","293"],"import { useState, useEffect, useContext, Linking } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Checkbox,\n  Avatar,\n} from \"@material-ui/core\";\nimport { useParams } from \"react-router-dom\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList, { server } from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  avatar: {\n    width: theme.spacing(17),\n    height: theme.spacing(17),\n  },\n}));\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Application Status\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"rejected\"\n                      checked={searchOptions.status.rejected}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Rejected\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"applied\"\n                      checked={searchOptions.status.applied}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Applied\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"shortlisted\"\n                      checked={searchOptions.status.shortlisted}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Shortlisted\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"name\"\n                    checked={searchOptions.sort[\"jobApplicant.name\"].status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.name\": {\n                            ...searchOptions.sort[\"jobApplicant.name\"],\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"name\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"name\">\n                    <Typography>Name</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort[\"jobApplicant.name\"].status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.name\": {\n                            ...searchOptions.sort[\"jobApplicant.name\"],\n                            desc: !searchOptions.sort[\"jobApplicant.name\"].desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort[\"jobApplicant.name\"].desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"dateOfApplication\"\n                    checked={searchOptions.sort.dateOfApplication.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          dateOfApplication: {\n                            ...searchOptions.sort.dateOfApplication,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"dateOfApplication\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"dateOfApplication\">\n                    <Typography>Date of Application</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.dateOfApplication.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          dateOfApplication: {\n                            ...searchOptions.sort.dateOfApplication,\n                            desc: !searchOptions.sort.dateOfApplication.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.dateOfApplication.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort[\"jobApplicant.rating\"].status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.rating\": {\n                            ...searchOptions.sort[[\"jobApplicant.rating\"]],\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort[\"jobApplicant.rating\"].status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.rating\": {\n                            ...searchOptions.sort[\"jobApplicant.rating\"],\n                            desc: !searchOptions.sort[\"jobApplicant.rating\"]\n                              .desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort[\"jobApplicant.rating\"].desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst ApplicationTile = (props) => {\n  const classes = useStyles();\n  const { application, getData } = props;\n  const setPopup = useContext(SetPopupContext);\n  const [open, setOpen] = useState(false);\n\n  const appliedOn = new Date(application.dateOfApplication);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const colorSet = {\n    applied: \"#3454D1\",\n    shortlisted: \"#47bce6\",\n    accepted: \"#09BC8A\",\n    rejected: \"#dc1f3f\",\n    deleted: \"#B49A67\",\n    cancelled: \"#FF8484\",\n    finished: \"#4EA5D9\",\n    review:\"#7570ff\"\n  };\n\n  const getResume = () => {\n    if (\n      application.jobApplicant.resume &&\n      application.jobApplicant.resume !== \"\"\n    ) {\n      const address = `${server}${application.jobApplicant.resume}`;\n      console.log(address);\n      axios(address, {\n        method: \"GET\",\n        responseType: \"blob\",\n      })\n        .then((response) => {\n          const file = new Blob([response.data], { type: \"application/pdf\" });\n          const fileURL = URL.createObjectURL(file);\n          window.open(fileURL);\n        })\n        .catch((error) => {\n          console.log(error);\n          setPopup({\n            open: true,\n            severity: \"error\",\n            message: \"No resume found\",\n          });\n        });\n    } else {\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"No resume found\",\n      });\n    }\n  };\n\n  const [iDate, setDate] = useState({\n    InterviewDate: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\n      .toISOString()\n      .substr(0, 16),\n    InterviewMedium: \"Onsite\",\n  });\n\n  const updateStatus = (status) => {\n    const address = `${apiList.applications}/${application._id}`;\n    const statusData = {\n      status: status,\n      dateOfJoining: new Date().toISOString(),\n      dateOfInterview: iDate.InterviewDate,\n      InterviewMedium: iDate.InterviewMedium,\n    };\n    axios\n      .put(address, statusData, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n      });\n  };\n\n  const [openDate, setdate] = useState(false);\n\n  const InterviewSchedule = (props) => {\n    const classes = useStyles();\n    const { open, handleClose, searchOptions, setSearchOptions, getData } =\n      props;\n\n    const handleInput = (key, value) => {\n      setDate({\n        ...iDate,\n        [key]: value,\n      });\n    };\n\n    return (\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"50px\",\n            outline: \"none\",\n            minWidth: \"10%\",\n          }}\n        >\n          <Grid\n            item\n            container\n            direction=\"column\"\n            spacing={4}\n            alignItems=\"center\"\n          >\n            <Typography variant=\"h5\" style={{ paddingBottom: \"15px\" }}>\n              Set interview Date and Medium\n            </Typography>\n\n            <TextField\n              style={{ paddingBottom: \"15px\" }}\n              label=\"Interview Date\"\n              type=\"datetime-local\"\n              value={iDate.InterviewDate}\n              onChange={(event) => {\n                handleInput(\"InterviewDate\", event.target.value);\n              }}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              variant=\"outlined\"\n              fullWidth\n            />\n\n            <TextField\n              style={{ paddingBottom: \"15px\" }}\n              select\n              label=\"Mode of Interview\"\n              variant=\"outlined\"\n              value={iDate.InterviewMedium}\n              onChange={(event) => {\n                handleInput(\"InterviewMedium\", event.target.value);\n              }}\n              fullWidth\n            >\n              <MenuItem value=\"Online\">Online</MenuItem>\n              <MenuItem value=\"On Site\">Onsite</MenuItem>\n            </TextField>\n\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => updateStatus(\"shortlisted\")}\n            >\n              Set schedule for Interview\n            </Button>\n          </Grid>\n        </Paper>\n      </Modal>\n    );\n  };\n\n  const buttonSet = {\n    applied: (\n      <>\n        <Grid item xs>\n          <Button\n            className={classes.statusBlock}\n            style={{\n              background: colorSet[\"shortlisted\"],\n              color: \"#ffffff\",\n            }}\n            onClick={() => setdate(true)}\n          >\n            Shortlist\n          </Button>\n        </Grid>\n        <Grid item xs>\n          <Button\n            className={classes.statusBlock}\n            style={{\n              background: colorSet[\"rejected\"],\n              color: \"#ffffff\",\n            }}\n            onClick={() => updateStatus(\"rejected\")}\n          >\n            Reject\n          </Button>\n        </Grid>\n        <InterviewSchedule open={openDate} handleClose={() => setdate(false)} />\n      </>\n    ),\n    shortlisted: (\n      <>\n        <Grid item xs>\n          <Button\n            className={classes.statusBlock}\n            style={{\n              background: colorSet[\"review\"],\n              color: \"#ffffff\",\n            }}\n            onClick={() =>  updateStatus(\"review\")}\n          >\n            Put under review\n          </Button>\n        </Grid>\n        <Grid item xs>\n          <Button\n            className={classes.statusBlock}\n            style={{\n              background: colorSet[\"rejected\"],\n              color: \"#ffffff\",\n            }}\n            onClick={() => updateStatus(\"rejected\")}\n          >\n            Reject\n          </Button>\n        </Grid>\n      </>\n    ),\n    rejected: (\n      <>\n        <Grid item xs>\n          <Paper\n            className={classes.statusBlock}\n            style={{\n              background: colorSet[\"rejected\"],\n              color: \"#ffffff\",\n            }}\n          >\n            Rejected\n          </Paper>\n        </Grid>\n      </>\n    ),\n    accepted: (\n      <>\n        <Grid item xs>\n          <Paper\n            className={classes.statusBlock}\n            style={{\n              background: colorSet[\"accepted\"],\n              color: \"#ffffff\",\n            }}\n          >\n            Accepted\n          </Paper>\n        </Grid>\n      </>\n    ),\n    review: (\n      <>\n      <Grid item xs>\n        <Button\n          className={classes.statusBlock}\n          style={{\n            background: colorSet[\"accepted\"],\n            color: \"#ffffff\",\n          }}\n          onClick={() =>  updateStatus(\"accepted\")}\n        >\n          accept\n        </Button>\n      </Grid>\n      <Grid item xs>\n        <Button\n          className={classes.statusBlock}\n          style={{\n            background: colorSet[\"rejected\"],\n            color: \"#ffffff\",\n          }}\n          onClick={() => updateStatus(\"rejected\")}\n        >\n          Reject\n        </Button>\n      </Grid>\n    </>\n    ),\n    cancelled: (\n      <>\n        <Grid item xs>\n          <Paper\n            className={classes.statusBlock}\n            style={{\n              background: colorSet[\"cancelled\"],\n              color: \"#ffffff\",\n            }}\n          >\n            Cancelled\n          </Paper>\n        </Grid>\n      </>\n    ),\n    finished: (\n      <>\n        <Grid item xs>\n          <Paper\n            className={classes.statusBlock}\n            style={{\n              background: colorSet[\"finished\"],\n              color: \"#ffffff\",\n            }}\n          >\n            Finished\n          </Paper>\n        </Grid>\n      </>\n    ),\n  };\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid\n          item\n          xs={2}\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <Avatar\n            src={`${server}${application.jobApplicant.profile}`}\n            className={classes.avatar}\n          />\n        </Grid>\n        <Grid container item xs={7} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\">\n              {application.jobApplicant.name}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Rating\n              value={\n                application.jobApplicant.rating !== -1\n                  ? application.jobApplicant.rating\n                  : null\n              }\n              readOnly\n            />\n          </Grid>\n          <Grid item>\n            Contact:{\" \"}\n            {application.jobApplicant.contactNumber === \"\"\n              ? \"Not Submitted\"\n              : application.jobApplicant.contactNumber}\n          </Grid>\n          <Grid item>E-mail: {application.jobApplicant.email}</Grid>\n          <Grid item>Address: {application.jobApplicant.MyAddress}</Grid>\n          <Grid item>Applied On: {appliedOn.toLocaleDateString()}</Grid>\n          <Grid item>\n            Education:{\" \"}\n            {application.jobApplicant.education\n              .map((edu) => {\n                return `${edu.institutionName} (${edu.startYear}-${\n                  edu.endYear ? edu.endYear : \"Ongoing\"\n                })`;\n              })\n              .join(\", \")}\n          </Grid>\n          <Grid item>\n            Message: {application.sop !== \"\" ? application.sop : \"Not Submitted\"}\n          </Grid>\n          <Grid item>\n            {application.jobApplicant.skills.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid>\n        </Grid>\n        <Grid item container direction=\"column\" xs={3}>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              className={classes.statusBlock}\n              style={{ background: \"#088475\", color: \"white\" }}\n              onClick={() => getResume()}\n            >\n              Download Resume\n            </Button>\n          </Grid>\n          <Grid item container xs>\n            {buttonSet[application.status]}\n          </Grid>\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ padding: \"10px 50px\" }}\n            // onClick={() => changeRating()}\n          >\n            Submit\n          </Button>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst JobApplications = (props) => {\n  const setPopup = useContext(SetPopupContext);\n  const [applications, setApplications] = useState([]);\n  const { jobId } = useParams();\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    status: {\n      all: false,\n      applied: false,\n      shortlisted: false,\n    },\n    sort: {\n      \"jobApplicant.name\": {\n        status: false,\n        desc: false,\n      },\n      dateOfApplication: {\n        status: true,\n        desc: true,\n      },\n      \"jobApplicant.rating\": {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    let searchParams = [];\n\n    if (searchOptions.status.rejected) {\n      searchParams = [...searchParams, `status=rejected`];\n    }\n    if (searchOptions.status.applied) {\n      searchParams = [...searchParams, `status=applied`];\n    }\n    if (searchOptions.status.shortlisted) {\n      searchParams = [...searchParams, `status=shortlisted`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = `${apiList.applicants}?jobId=${jobId}`;\n    if (queryString !== \"\") {\n      address = `${address}&${queryString}`;\n    }\n\n    console.log(address);\n\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setApplications(response.data);\n      })\n      .catch((err) => {\n        console.log(err.response);\n        // console.log(err.response.data);\n        setApplications([]);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid item>\n          <Typography variant=\"h2\">Applications</Typography>\n        </Grid>\n        <Grid item>\n          <Typography variant=\"h6\">\n            Total Applications Recieved - {applications.length}\n          </Typography>\n        </Grid>\n        <Grid item>\n          <IconButton onClick={() => setFilterOpen(true)}>\n            <FilterListIcon />\n          </IconButton>\n        </Grid>\n        <Grid\n          container\n          item\n          xs\n          direction=\"column\"\n          style={{ width: \"100%\" }}\n          alignItems=\"stretch\"\n          justify=\"center\"\n        >\n          {applications.length > 0 ? (\n            applications.map((obj) => (\n              <Grid item>\n                {/* {console.log(obj)} */}\n                <ApplicationTile application={obj} getData={getData} />\n              </Grid>\n            ))\n          ) : (\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n              No Applications Found\n            </Typography>\n          )}\n        </Grid>\n      </Grid>\n      <FilterPopup\n        open={filterOpen}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        handleClose={() => setFilterOpen(false)}\n        getData={() => {\n          getData();\n          setFilterOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nexport default JobApplications;\n","D:\\job-portal-main\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js",["294","295","296","297","298","299","300","301","302"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Checkbox,\n  Avatar,\n} from \"@material-ui/core\";\nimport { useParams } from \"react-router-dom\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList, { server } from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  avatar: {\n    width: theme.spacing(17),\n    height: theme.spacing(17),\n  },\n}));\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          {/* <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Application Status\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"rejected\"\n                      checked={searchOptions.status.rejected}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Rejected\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"applied\"\n                      checked={searchOptions.status.applied}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Applied\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"shortlisted\"\n                      checked={searchOptions.status.shortlisted}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Shortlisted\"\n                />\n              </Grid>\n            </Grid>\n          </Grid> */}\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={6}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"name\"\n                    checked={searchOptions.sort[\"jobApplicant.name\"].status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.name\": {\n                            ...searchOptions.sort[\"jobApplicant.name\"],\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"name\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"name\">\n                    <Typography>Name</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort[\"jobApplicant.name\"].status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.name\": {\n                            ...searchOptions.sort[\"jobApplicant.name\"],\n                            desc: !searchOptions.sort[\"jobApplicant.name\"].desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort[\"jobApplicant.name\"].desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={6}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"jobTitle\"\n                    checked={searchOptions.sort[\"job.title\"].status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"job.title\": {\n                            ...searchOptions.sort[\"job.title\"],\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"jobTitle\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"jobTitle\">\n                    <Typography>Job Title</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort[\"job.title\"].status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"job.title\": {\n                            ...searchOptions.sort[\"job.title\"],\n                            desc: !searchOptions.sort[\"job.title\"].desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort[\"job.title\"].desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={6}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"dateOfJoining\"\n                    checked={searchOptions.sort.dateOfJoining.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          dateOfJoining: {\n                            ...searchOptions.sort.dateOfJoining,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"dateOfJoining\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"dateOfJoining\">\n                    <Typography>Date of Joining</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.dateOfJoining.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          dateOfJoining: {\n                            ...searchOptions.sort.dateOfJoining,\n                            desc: !searchOptions.sort.dateOfJoining.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.dateOfJoining.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={6}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort[\"jobApplicant.rating\"].status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.rating\": {\n                            ...searchOptions.sort[[\"jobApplicant.rating\"]],\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort[\"jobApplicant.rating\"].status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.rating\": {\n                            ...searchOptions.sort[\"jobApplicant.rating\"],\n                            desc: !searchOptions.sort[\"jobApplicant.rating\"]\n                              .desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort[\"jobApplicant.rating\"].desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst ApplicationTile = (props) => {\n  const classes = useStyles();\n  const { application, getData } = props;\n  const setPopup = useContext(SetPopupContext);\n  const [open, setOpen] = useState(false);\n  const [openEndJob, setOpenEndJob] = useState(false);\n  const [rating, setRating] = useState(application.jobApplicant.rating);\n\n  const appliedOn = new Date(application.dateOfApplication);\n\n  const changeRating = () => {\n    axios\n      .put(\n        apiList.rating,\n        { rating: rating, applicantId: application.jobApplicant.userId },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        console.log(response.data);\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: \"Rating updated successfully\",\n        });\n        // fetchRating();\n        getData();\n        setOpen(false);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        console.log(err);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        // fetchRating();\n        getData();\n        setOpen(false);\n      });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleCloseEndJob = () => {\n    setOpenEndJob(false);\n  };\n\n  const colorSet = {\n    applied: \"#3454D1\",\n    shortlisted: \"#DC851F\",\n    accepted: \"#09BC8A\",\n    rejected: \"#D1345B\",\n    deleted: \"#B49A67\",\n    cancelled: \"#FF8484\",\n    finished: \"#4EA5D9\",\n  };\n\n  const getResume = () => {\n    if (\n      application.jobApplicant.resume &&\n      application.jobApplicant.resume !== \"\"\n    ) {\n      const address = `${server}${application.jobApplicant.resume}`;\n      console.log(address);\n      axios(address, {\n        method: \"GET\",\n        responseType: \"blob\",\n      })\n        .then((response) => {\n          const file = new Blob([response.data], { type: \"application/pdf\" });\n          const fileURL = URL.createObjectURL(file);\n          window.open(fileURL);\n        })\n        .catch((error) => {\n          console.log(error);\n          setPopup({\n            open: true,\n            severity: \"error\",\n            message: \"Error\",\n          });\n        });\n    } else {\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"No resume found\",\n      });\n    }\n  };\n\n  const updateStatus = (status) => {\n    const address = `${apiList.applications}/${application._id}`;\n    const statusData = {\n      status: status,\n      dateOfJoining: new Date().toISOString(),\n    };\n    axios\n      .put(address, statusData, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        handleCloseEndJob();\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n        handleCloseEndJob();\n      });\n  };\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid\n          item\n          xs={2}\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <Avatar\n            src={`${server}${application.jobApplicant.profile}`}\n            className={classes.avatar}\n          />\n        </Grid>\n        <Grid container item xs={7} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\">\n              {application.jobApplicant.name}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Rating\n              value={\n                application.jobApplicant.rating !== -1\n                  ? application.jobApplicant.rating\n                  : null\n              }\n              readOnly\n            />\n          </Grid>\n          <Grid item>Job Title: {application.job.title}</Grid>\n          <Grid item>Role: {application.job.jobType}</Grid>\n          <Grid item>Applied On: {appliedOn.toLocaleDateString()}</Grid>\n          <Grid item>\n            SOP: {application.sop !== \"\" ? application.sop : \"Not Submitted\"}\n          </Grid>\n          <Grid item>\n            {application.jobApplicant.skills.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid>\n        </Grid>\n        <Grid item container direction=\"column\" xs={3}>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              className={classes.statusBlock}\n              color=\"primary\"\n              style={{\n                background: \"#088475\",\n              }}\n              onClick={() => getResume()}\n            >\n              Download Resume\n            </Button>\n          </Grid>\n          <Grid item container xs>\n            {/* {buttonSet[application.status]} */}\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.statusBlock}\n              style={{\n                background: \"#ff3d3d\",\n              }}\n              onClick={() => {\n                setOpenEndJob(true);\n              }}\n            >\n              Reject\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.statusBlock}\n              onClick={() => {\n                setOpen(true);\n              }}\n            >\n              Rate Applicant\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Rating\n            name=\"simple-controlled\"\n            style={{ marginBottom: \"30px\" }}\n            value={rating === -1 ? null : rating}\n            onChange={(event, newValue) => {\n              setRating(newValue);\n            }}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ padding: \"10px 50px\" }}\n            onClick={() => changeRating()}\n          >\n            Submit\n          </Button>\n        </Paper>\n      </Modal>\n      <Modal\n        open={openEndJob}\n        onClose={handleCloseEndJob}\n        className={classes.popupDialog}\n      >\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\n            Are you sure?\n          </Typography>\n          <Grid container justify=\"center\" spacing={5}>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => {\n                  updateStatus(\"finished\");\n                }}\n              >\n                Yes\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleCloseEndJob()}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst AcceptedApplicants = (props) => {\n  const setPopup = useContext(SetPopupContext);\n  const [applications, setApplications] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    sort: {\n      \"jobApplicant.name\": {\n        status: false,\n        desc: false,\n      },\n      \"job.title\": {\n        status: false,\n        desc: false,\n      },\n      dateOfJoining: {\n        status: true,\n        desc: true,\n      },\n      \"jobApplicant.rating\": {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    let searchParams = [];\n    searchParams = [...searchParams, `status=review`];\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = `${apiList.applicants}`;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    console.log(address);\n\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setApplications(response.data);\n      })\n      .catch((err) => {\n        console.log(err.response);\n        // console.log(err.response.data);\n        setApplications([]);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid item>\n          <Typography variant=\"h2\">Under Review</Typography>\n        </Grid>\n        <Grid item>\n          <IconButton onClick={() => setFilterOpen(true)}>\n            <FilterListIcon />\n          </IconButton>\n        </Grid>\n        <Grid\n          container\n          item\n          xs\n          direction=\"column\"\n          style={{ width: \"100%\" }}\n          alignItems=\"stretch\"\n          justify=\"center\"\n        >\n          {applications.length > 0 ? (\n            applications.map((obj) => (\n              <Grid item>\n                {/* {console.log(obj)} */}\n                <ApplicationTile application={obj} getData={getData} />\n              </Grid>\n            ))\n          ) : (\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n              No Applications Found\n            </Typography>\n          )}\n        </Grid>\n      </Grid>\n      <FilterPopup\n        open={filterOpen}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        handleClose={() => setFilterOpen(false)}\n        getData={() => {\n          getData();\n          setFilterOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nexport default AcceptedApplicants;\n","D:\\job-portal-main\\frontend\\src\\lib\\MessagePopup.js",["303"],"import { Snackbar, Slide } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\n\nconst MessagePopup = (props) => {\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    props.setOpen(false);\n  };\n  return (\n    <Snackbar open={props.open} onClose={handleClose} autoHideDuration={2000}>\n      <Alert onClose={handleClose} severity={props.severity}>\n        {props.message}\n      </Alert>\n    </Snackbar>\n  );\n};\n\nexport default MessagePopup;\n","D:\\job-portal-main\\frontend\\src\\component\\recruiter\\Profile.js",["304","305","306"],"import { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  Typography,\n  Modal,\n  Paper,\n  makeStyles,\n  TextField,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/material.css\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    // padding: \"30px\",\n  },\n}));\n\nconst Profile = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n\n  const [profileDetails, setProfileDetails] = useState({\n    name: \"\",\n    bio: \"\",\n    contactNumber: \"\",\n  });\n\n  const [phone, setPhone] = useState(\"\");\n\n  const handleInput = (key, value) => {\n    setProfileDetails({\n      ...profileDetails,\n      [key]: value,\n    });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    axios\n      .get(apiList.user, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setProfileDetails(response.data);\n        setPhone(response.data.contactNumber);\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  const handleUpdate = () => {\n    let updatedDetails = {\n      ...profileDetails,\n    };\n    if (phone !== \"\") {\n      updatedDetails = {\n        ...profileDetails,\n        contactNumber: `+${phone}`,\n      };\n    } else {\n      updatedDetails = {\n        ...profileDetails,\n        contactNumber: \"\",\n      };\n    }\n\n    axios\n      .put(apiList.user, updatedDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid item>\n          <Typography variant=\"h2\">Profile</Typography>\n        </Grid>\n        <Grid item xs style={{ width: \"100%\" }}>\n          <Paper\n            style={{\n              padding: \"20px\",\n              outline: \"none\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              //   width: \"60%\",\n            }}\n          >\n            <Grid container direction=\"column\" alignItems=\"stretch\" spacing={3}>\n              <Grid item>\n                <TextField\n                  label=\"Name\"\n                  value={profileDetails.name}\n                  onChange={(event) => handleInput(\"name\", event.target.value)}\n                  className={classes.inputBox}\n                  variant=\"outlined\"\n                  fullWidth\n                  style={{ width: \"100%\" }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  label=\"Bio (upto 250 words)\"\n                  multiline\n                  rows={8}\n                  style={{ width: \"100%\" }}\n                  variant=\"outlined\"\n                  value={profileDetails.bio}\n                  onChange={(event) => {\n                    if (\n                      event.target.value.split(\" \").filter(function (n) {\n                        return n != \"\";\n                      }).length <= 250\n                    ) {\n                      handleInput(\"bio\", event.target.value);\n                    }\n                  }}\n                />\n              </Grid>\n              <Grid\n                item\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <PhoneInput\n                  country={\"pk\"}\n                  value={phone}\n                  onChange={(phone) => setPhone(phone)}\n                  style={{ width: \"auto\" }}\n                />\n              </Grid>\n            </Grid>\n            <Button\n              variant=\"contained\"\n              style={{\n                backgroundColor: \"#088475\",\n                color: \"white\",\n                padding: \"10px 50px\",\n                marginTop: \"30px\",\n              }}\n              onClick={() => handleUpdate()}\n            >\n              Update Details\n            </Button>\n          </Paper>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Profile;\n","D:\\job-portal-main\\frontend\\src\\lib\\isAuth.js",[],"D:\\job-portal-main\\frontend\\src\\lib\\PasswordInput.js",[],"D:\\job-portal-main\\frontend\\src\\lib\\EmailInput.js",[],"D:\\job-portal-main\\frontend\\src\\lib\\apiList.js",[],"D:\\job-portal-main\\frontend\\src\\lib\\FileUploadInput.js",[],"D:\\bahroa careers portal 2-4-22 updated\\src\\index.js",[],"D:\\bahroa careers portal 2-4-22 updated\\src\\reportWebVitals.js",[],"D:\\bahroa careers portal 2-4-22 updated\\src\\App.js",["307"],"import { createContext, useState } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { Grid, makeStyles } from \"@material-ui/core\";\n\nimport Welcome, { ErrorPage } from \"./component/Welcome\";\nimport WelcomeUser from \"./component/WelcomeUser\";\nimport Landing from \"./component/LandingPage\";\nimport Navbar from \"./component/Navbar\";\nimport NotFound from \"./component/404\";\nimport Login from \"./component/Login\";\nimport Logout from \"./component/Logout\";\nimport Signup from \"./component/Signup\";\nimport Home from \"./component/Home\";\nimport Admin from \"./component/Admin/Home\";\nimport Status from \"./component/Admin/Status\";\nimport Recruiters from \"./component/Admin/Recruiters\";\nimport AdminJobs from \"./component/Admin/Jobs\";\nimport Applications from \"./component/Applications\";\nimport Profile from \"./component/Profile\";\nimport CreateJobs from \"./component/recruiter/CreateJobs\";\nimport MyJobs from \"./component/recruiter/MyJobs\";\nimport Schedule from \"./component/recruiter/Schedule\";\nimport JobApplications from \"./component/recruiter/JobApplications\";\nimport AcceptedApplicants from \"./component/recruiter/AcceptedApplicants\";\nimport RecruiterProfile from \"./component/recruiter/Profile\";\nimport AddUser from \"./component/Admin/CreatUser\";\nimport MessagePopup from \"./lib/MessagePopup\";\nimport isAuth, { userType } from \"./lib/isAuth\";\nimport logo from \"./logo.png\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    backgroundImage: `url(${logo})`,\n    backgroundPosition:\"center\",\n    backgroundSize:\"cover\",\n    backgroundAttachment: \"fixed\",\n    background: \"#f7faf9\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    minHeight: \"98vh\",\n    paddingTop: \"60px\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n}));\n\nexport const SetPopupContext = createContext();\n\nfunction App() {\n  const classes = useStyles();\n  const [popup, setPopup] = useState({\n    open: false,\n    severity: \"\",\n    message: \"\",\n  });\n  return (\n    <BrowserRouter>\n      <SetPopupContext.Provider value={setPopup}>\n        <Grid container direction=\"column\">\n          <Grid item xs>\n            <Navbar />\n          </Grid>\n          <Grid item className={classes.body}>\n            <Switch>\n              <Route exact path=\"/\">\n                {userType() === \"applicant\" ? (\n                  <WelcomeUser />\n                ) : userType() === null ? (\n                  <Landing />\n                ) : userType() === \"admin\" ? (\n                  <Status />\n                ) : (\n                  <Welcome />\n                )}\n              </Route>\n              <Route exact path=\"/login\">\n                <Login />\n              </Route>\n              <Route exact path=\"/signup\">\n                <Signup />\n              </Route>\n              <Route exact path=\"/logout\">\n                <Logout />\n              </Route>\n              <Route exact path=\"/home\">\n                <Home />\n              </Route>\n              <Route exact path=\"/adminHome\">\n                {userType() === \"admin\" ? <Admin /> : <NotFound />}\n              </Route>\n              <Route exact path=\"/CreateUser\">\n                {userType() === \"admin\" ? <AddUser /> : <NotFound />}\n              </Route>\n              <Route exact path=\"/adminJobs\">\n                {userType() === \"admin\" ? <AdminJobs /> : <NotFound />}\n              </Route>\n              <Route exact path=\"/getRecruiters\">\n                {userType() === \"admin\" ? <Recruiters /> : <NotFound />}\n              </Route>\n              <Route exact path=\"/applications\">\n                {userType() === \"applicant\" ? <Applications /> : <NotFound />}\n              </Route>\n              <Route exact path=\"/profile\">\n                {userType() === \"recruiter\" ? (\n                  <RecruiterProfile />\n                ) : (\n                  <Profile />\n                )}\n              </Route>\n              <Route exact path=\"/schedule\">\n                {userType() === \"recruiter\" ? <Schedule /> : <NotFound />}\n              </Route>\n              <Route exact path=\"/addjob\">\n                {userType() === \"recruiter\" ? <CreateJobs /> : <NotFound />}\n              </Route>\n              <Route exact path=\"/myjobs\">\n                {userType() === \"recruiter\" ? <MyJobs /> : <NotFound />}\n              </Route>\n              <Route exact path=\"/job/applications/:jobId\">\n                {userType() === \"recruiter\" ? (\n                  <JobApplications />\n                ) : (\n                  <NotFound />\n                )}\n              </Route>\n              <Route exact path=\"/employees\">\n                {userType() === \"recruiter\" ? (\n                  <AcceptedApplicants />\n                ) : (\n                  <NotFound />\n                )}\n              </Route>\n              <Route>\n                <ErrorPage />\n              </Route>\n            </Switch>\n          </Grid>\n        </Grid>\n        <MessagePopup\n          open={popup.open}\n          setOpen={(status) =>\n            setPopup({\n              ...popup,\n              open: status,\n            })\n          }\n          severity={popup.severity}\n          message={popup.message}\n        />\n      </SetPopupContext.Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n",["308","309"],"D:\\bahroa careers portal 2-4-22 updated\\src\\lib\\isAuth.js",[],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\WelcomeUser.js",[],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Welcome.js",[],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\LandingPage.js",["310","311","312","313","314","315","316"],"import { Grid, Typography, Paper } from \"@material-ui/core\";\nimport fb from \"./fb.png\";\nimport twitter from \"./twitter.png\";\nimport yt from \"./yt.png\";\nimport insta from \"./insta.png\";\nimport Example from \"./carasol\";\nimport { useEffect, useState } from \"react\";\n\nconst WelcomeSite = (props) => {\n  const [hight, setHight] = useState(window.innerHeight);\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    function handleResize() {\n      setWidth(window.innerWidth);\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  return (\n    <>\n      <Example />\n      <Grid\n        style={{\n          backgroundColor: \"rgb(8, 132, 118,0.7)\",\n          position: \"fixed\",\n          bottom: 0,\n          //  right:0,\n          height: \"50px\",\n          width: width,\n          display: \"flex\",\n          flexDirection: \"row\",\n        }}\n      >\n        <img\n          style={{ padding: \"10px\", cursor: \"pointer\" }}\n          onClick={() =>\n            window.open(\"https://www.facebook.com/\", \"_blank\")\n          }\n          src={fb}\n        ></img>\n        <img\n          style={{ padding: \"10px\", cursor: \"pointer\" }}\n          onClick={() =>\n            window.open(\n              \"https://www.youtube.com\",\n              \"_blank\"\n            )\n          }\n          src={yt}\n        ></img>\n        <img\n          style={{ padding: \"10px\", cursor: \"pointer\" }}\n          onClick={() =>\n            window.open(\n              \"https://twitter.com/\",\n              \"_blank\"\n            )\n          }\n          src={twitter}\n        ></img>\n        <img\n          style={{ padding: \"10px\", cursor: \"pointer\" }}\n          onClick={() =>\n            window.open(\n              \"https://www.instagram.com/\",\n              \"_blank\"\n            )\n          }\n          src={insta}\n        ></img>\n        <Typography\n          style={{\n            display: \"flex\",\n            marginLeft: \"auto\",\n            float: \"right\",\n            color: \"white\",\n            fontSize: \"12px\",\n            padding: \"15px\",\n          }}\n        >\n          2021 ©️ all right reserved\n        </Typography>\n      </Grid>\n    </>\n  );\n};\nexport default WelcomeSite;\n","D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Navbar.js",[],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\404.js",[],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Login.js",["317"],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Logout.js",["318"],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Signup.js",["319"],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Home.js",["320","321","322","323","324","325","326","327","328"],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Applications.js",["329","330","331","332","333","334","335","336","337","338"],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Profile.js",["339","340","341","342","343","344","345","346"],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Admin\\Home.js",["347","348","349","350","351","352","353","354","355","356","357"],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Admin\\Status.js",["358","359"],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Admin\\Recruiters.js",["360","361","362","363","364","365","366","367","368","369","370","371","372","373","374"],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Admin\\Jobs.js",["375","376","377","378","379"],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Admin\\CreatUser.js",["380","381","382","383","384","385","386"],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\recruiter\\CreateJobs.js",["387","388","389"],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\recruiter\\MyJobs.js",["390","391","392","393","394","395"],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\recruiter\\Schedule.js",["396","397","398","399","400","401","402","403","404"],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\recruiter\\JobApplications.js",["405","406","407","408","409","410","411","412"],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\recruiter\\AcceptedApplicants.js",["413","414","415","416","417","418","419","420","421"],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\recruiter\\Profile.js",["422","423","424"],"D:\\bahroa careers portal 2-4-22 updated\\src\\lib\\MessagePopup.js",["425"],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\Stepper.js",[],"D:\\bahroa careers portal 2-4-22 updated\\src\\lib\\PasswordInput.js",[],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\carasol.js",["426","427","428","429","430","431","432","433"],"D:\\bahroa careers portal 2-4-22 updated\\src\\lib\\EmailInput.js",[],"D:\\bahroa careers portal 2-4-22 updated\\src\\lib\\apiList.js",[],"D:\\bahroa careers portal 2-4-22 updated\\src\\lib\\FileUploadInput.js",[],"D:\\bahroa careers portal 2-4-22 updated\\src\\component\\progressbar.js",[],{"ruleId":"434","replacedBy":"435"},{"ruleId":"436","replacedBy":"437"},{"ruleId":"438","severity":1,"message":"439","line":28,"column":8,"nodeType":"440","messageId":"441","endLine":28,"endColumn":14},{"ruleId":"442","severity":1,"message":"443","line":16,"column":6,"nodeType":"444","endLine":16,"endColumn":8,"suggestions":"445"},{"ruleId":"438","severity":1,"message":"446","line":4,"column":3,"nodeType":"440","messageId":"441","endLine":4,"endColumn":12},{"ruleId":"447","severity":1,"message":"448","line":477,"column":32,"nodeType":"449","messageId":"450","endLine":477,"endColumn":34},{"ruleId":"438","severity":1,"message":"451","line":6,"column":3,"nodeType":"440","messageId":"441","endLine":6,"endColumn":13},{"ruleId":"438","severity":1,"message":"452","line":7,"column":3,"nodeType":"440","messageId":"441","endLine":7,"endColumn":17},{"ruleId":"438","severity":1,"message":"446","line":10,"column":3,"nodeType":"440","messageId":"441","endLine":10,"endColumn":12},{"ruleId":"438","severity":1,"message":"453","line":13,"column":3,"nodeType":"440","messageId":"441","endLine":13,"endColumn":9},{"ruleId":"438","severity":1,"message":"454","line":14,"column":3,"nodeType":"440","messageId":"441","endLine":14,"endColumn":19},{"ruleId":"438","severity":1,"message":"455","line":15,"column":3,"nodeType":"440","messageId":"441","endLine":15,"endColumn":12},{"ruleId":"438","severity":1,"message":"456","line":16,"column":3,"nodeType":"440","messageId":"441","endLine":16,"endColumn":11},{"ruleId":"438","severity":1,"message":"457","line":17,"column":3,"nodeType":"440","messageId":"441","endLine":17,"endColumn":11},{"ruleId":"447","severity":1,"message":"458","line":177,"column":34,"nodeType":"449","messageId":"450","endLine":177,"endColumn":36},{"ruleId":"442","severity":1,"message":"459","line":238,"column":6,"nodeType":"444","endLine":238,"endColumn":8,"suggestions":"460"},{"ruleId":"438","severity":1,"message":"461","line":142,"column":7,"nodeType":"440","messageId":"441","endLine":142,"endColumn":13},{"ruleId":"447","severity":1,"message":"458","line":162,"column":27,"nodeType":"449","messageId":"450","endLine":162,"endColumn":29},{"ruleId":"447","severity":1,"message":"448","line":236,"column":32,"nodeType":"449","messageId":"450","endLine":236,"endColumn":34},{"ruleId":"462","severity":1,"message":"463","line":259,"column":15,"nodeType":"464","endLine":262,"endColumn":16},{"ruleId":"442","severity":1,"message":"465","line":706,"column":6,"nodeType":"444","endLine":706,"endColumn":8,"suggestions":"466"},{"ruleId":"447","severity":1,"message":"448","line":728,"column":33,"nodeType":"449","messageId":"450","endLine":728,"endColumn":35},{"ruleId":"447","severity":1,"message":"448","line":735,"column":33,"nodeType":"449","messageId":"450","endLine":735,"endColumn":35},{"ruleId":"447","severity":1,"message":"448","line":743,"column":32,"nodeType":"449","messageId":"450","endLine":743,"endColumn":34},{"ruleId":"447","severity":1,"message":"448","line":746,"column":39,"nodeType":"449","messageId":"450","endLine":746,"endColumn":41},{"ruleId":"438","severity":1,"message":"467","line":1,"column":10,"nodeType":"440","messageId":"441","endLine":1,"endColumn":18},{"ruleId":"438","severity":1,"message":"468","line":6,"column":3,"nodeType":"440","messageId":"441","endLine":6,"endColumn":8},{"ruleId":"438","severity":1,"message":"469","line":119,"column":10,"nodeType":"440","messageId":"441","endLine":119,"endColumn":18},{"ruleId":"438","severity":1,"message":"470","line":119,"column":20,"nodeType":"440","messageId":"441","endLine":119,"endColumn":31},{"ruleId":"438","severity":1,"message":"471","line":120,"column":10,"nodeType":"440","messageId":"441","endLine":120,"endColumn":14},{"ruleId":"442","severity":1,"message":"459","line":152,"column":6,"nodeType":"444","endLine":152,"endColumn":8,"suggestions":"472"},{"ruleId":"438","severity":1,"message":"473","line":215,"column":9,"nodeType":"440","messageId":"441","endLine":215,"endColumn":20},{"ruleId":"438","severity":1,"message":"474","line":219,"column":9,"nodeType":"440","messageId":"441","endLine":219,"endColumn":20},{"ruleId":"438","severity":1,"message":"475","line":1,"column":22,"nodeType":"440","messageId":"441","endLine":1,"endColumn":31},{"ruleId":"438","severity":1,"message":"468","line":7,"column":3,"nodeType":"440","messageId":"441","endLine":7,"endColumn":8},{"ruleId":"447","severity":1,"message":"448","line":877,"column":36,"nodeType":"449","messageId":"450","endLine":877,"endColumn":38},{"ruleId":"438","severity":1,"message":"455","line":15,"column":3,"nodeType":"440","messageId":"441","endLine":15,"endColumn":12},{"ruleId":"438","severity":1,"message":"476","line":21,"column":8,"nodeType":"440","messageId":"441","endLine":21,"endColumn":18},{"ruleId":"442","severity":1,"message":"459","line":750,"column":6,"nodeType":"444","endLine":750,"endColumn":8,"suggestions":"477"},{"ruleId":"447","severity":1,"message":"448","line":766,"column":33,"nodeType":"449","messageId":"450","endLine":766,"endColumn":35},{"ruleId":"447","severity":1,"message":"448","line":772,"column":33,"nodeType":"449","messageId":"450","endLine":772,"endColumn":35},{"ruleId":"447","severity":1,"message":"448","line":778,"column":32,"nodeType":"449","messageId":"450","endLine":778,"endColumn":34},{"ruleId":"438","severity":1,"message":"478","line":1,"column":43,"nodeType":"440","messageId":"441","endLine":1,"endColumn":50},{"ruleId":"438","severity":1,"message":"452","line":7,"column":3,"nodeType":"440","messageId":"441","endLine":7,"endColumn":17},{"ruleId":"438","severity":1,"message":"453","line":13,"column":3,"nodeType":"440","messageId":"441","endLine":13,"endColumn":9},{"ruleId":"438","severity":1,"message":"455","line":15,"column":3,"nodeType":"440","messageId":"441","endLine":15,"endColumn":12},{"ruleId":"438","severity":1,"message":"479","line":439,"column":32,"nodeType":"440","messageId":"441","endLine":439,"endColumn":45},{"ruleId":"438","severity":1,"message":"480","line":439,"column":47,"nodeType":"440","messageId":"441","endLine":439,"endColumn":63},{"ruleId":"438","severity":1,"message":"481","line":439,"column":65,"nodeType":"440","messageId":"441","endLine":439,"endColumn":72},{"ruleId":"442","severity":1,"message":"459","line":793,"column":6,"nodeType":"444","endLine":793,"endColumn":8,"suggestions":"482"},{"ruleId":"438","severity":1,"message":"452","line":7,"column":3,"nodeType":"440","messageId":"441","endLine":7,"endColumn":17},{"ruleId":"438","severity":1,"message":"446","line":10,"column":3,"nodeType":"440","messageId":"441","endLine":10,"endColumn":12},{"ruleId":"438","severity":1,"message":"453","line":13,"column":3,"nodeType":"440","messageId":"441","endLine":13,"endColumn":9},{"ruleId":"438","severity":1,"message":"454","line":14,"column":3,"nodeType":"440","messageId":"441","endLine":14,"endColumn":19},{"ruleId":"438","severity":1,"message":"455","line":15,"column":3,"nodeType":"440","messageId":"441","endLine":15,"endColumn":12},{"ruleId":"438","severity":1,"message":"456","line":16,"column":3,"nodeType":"440","messageId":"441","endLine":16,"endColumn":11},{"ruleId":"438","severity":1,"message":"483","line":20,"column":10,"nodeType":"440","messageId":"441","endLine":20,"endColumn":19},{"ruleId":"438","severity":1,"message":"484","line":450,"column":9,"nodeType":"440","messageId":"441","endLine":450,"endColumn":17},{"ruleId":"442","severity":1,"message":"459","line":720,"column":6,"nodeType":"444","endLine":720,"endColumn":8,"suggestions":"485"},{"ruleId":"438","severity":1,"message":"486","line":1,"column":20,"nodeType":"440","messageId":"441","endLine":1,"endColumn":25},{"ruleId":"438","severity":1,"message":"468","line":6,"column":3,"nodeType":"440","messageId":"441","endLine":6,"endColumn":8},{"ruleId":"442","severity":1,"message":"459","line":53,"column":6,"nodeType":"444","endLine":53,"endColumn":8,"suggestions":"487"},{"ruleId":"447","severity":1,"message":"448","line":164,"column":34,"nodeType":"449","messageId":"450","endLine":164,"endColumn":36},{"ruleId":"438","severity":1,"message":"439","line":28,"column":8,"nodeType":"440","messageId":"441","endLine":28,"endColumn":14},{"ruleId":"434","replacedBy":"488"},{"ruleId":"436","replacedBy":"489"},{"ruleId":"438","severity":1,"message":"490","line":1,"column":28,"nodeType":"440","messageId":"441","endLine":1,"endColumn":33},{"ruleId":"438","severity":1,"message":"491","line":10,"column":10,"nodeType":"440","messageId":"441","endLine":10,"endColumn":15},{"ruleId":"438","severity":1,"message":"492","line":10,"column":17,"nodeType":"440","messageId":"441","endLine":10,"endColumn":25},{"ruleId":"462","severity":1,"message":"463","line":36,"column":9,"nodeType":"464","endLine":42,"endColumn":10},{"ruleId":"462","severity":1,"message":"463","line":43,"column":9,"nodeType":"464","endLine":52,"endColumn":10},{"ruleId":"462","severity":1,"message":"463","line":53,"column":9,"nodeType":"464","endLine":62,"endColumn":10},{"ruleId":"462","severity":1,"message":"463","line":63,"column":9,"nodeType":"464","endLine":72,"endColumn":10},{"ruleId":"438","severity":1,"message":"446","line":4,"column":3,"nodeType":"440","messageId":"441","endLine":4,"endColumn":12},{"ruleId":"442","severity":1,"message":"443","line":16,"column":6,"nodeType":"444","endLine":16,"endColumn":8,"suggestions":"493"},{"ruleId":"447","severity":1,"message":"448","line":477,"column":32,"nodeType":"449","messageId":"450","endLine":477,"endColumn":34},{"ruleId":"438","severity":1,"message":"461","line":142,"column":7,"nodeType":"440","messageId":"441","endLine":142,"endColumn":13},{"ruleId":"447","severity":1,"message":"458","line":162,"column":27,"nodeType":"449","messageId":"450","endLine":162,"endColumn":29},{"ruleId":"447","severity":1,"message":"448","line":236,"column":32,"nodeType":"449","messageId":"450","endLine":236,"endColumn":34},{"ruleId":"462","severity":1,"message":"463","line":259,"column":15,"nodeType":"464","endLine":262,"endColumn":16},{"ruleId":"442","severity":1,"message":"465","line":706,"column":6,"nodeType":"444","endLine":706,"endColumn":8,"suggestions":"494"},{"ruleId":"447","severity":1,"message":"448","line":728,"column":33,"nodeType":"449","messageId":"450","endLine":728,"endColumn":35},{"ruleId":"447","severity":1,"message":"448","line":735,"column":33,"nodeType":"449","messageId":"450","endLine":735,"endColumn":35},{"ruleId":"447","severity":1,"message":"448","line":743,"column":32,"nodeType":"449","messageId":"450","endLine":743,"endColumn":34},{"ruleId":"447","severity":1,"message":"448","line":746,"column":39,"nodeType":"449","messageId":"450","endLine":746,"endColumn":41},{"ruleId":"438","severity":1,"message":"451","line":6,"column":3,"nodeType":"440","messageId":"441","endLine":6,"endColumn":13},{"ruleId":"438","severity":1,"message":"452","line":7,"column":3,"nodeType":"440","messageId":"441","endLine":7,"endColumn":17},{"ruleId":"438","severity":1,"message":"446","line":10,"column":3,"nodeType":"440","messageId":"441","endLine":10,"endColumn":12},{"ruleId":"438","severity":1,"message":"453","line":13,"column":3,"nodeType":"440","messageId":"441","endLine":13,"endColumn":9},{"ruleId":"438","severity":1,"message":"454","line":14,"column":3,"nodeType":"440","messageId":"441","endLine":14,"endColumn":19},{"ruleId":"438","severity":1,"message":"455","line":15,"column":3,"nodeType":"440","messageId":"441","endLine":15,"endColumn":12},{"ruleId":"438","severity":1,"message":"456","line":16,"column":3,"nodeType":"440","messageId":"441","endLine":16,"endColumn":11},{"ruleId":"438","severity":1,"message":"457","line":17,"column":3,"nodeType":"440","messageId":"441","endLine":17,"endColumn":11},{"ruleId":"447","severity":1,"message":"458","line":177,"column":34,"nodeType":"449","messageId":"450","endLine":177,"endColumn":36},{"ruleId":"442","severity":1,"message":"459","line":238,"column":6,"nodeType":"444","endLine":238,"endColumn":8,"suggestions":"495"},{"ruleId":"438","severity":1,"message":"467","line":1,"column":10,"nodeType":"440","messageId":"441","endLine":1,"endColumn":18},{"ruleId":"438","severity":1,"message":"468","line":6,"column":3,"nodeType":"440","messageId":"441","endLine":6,"endColumn":8},{"ruleId":"438","severity":1,"message":"469","line":119,"column":10,"nodeType":"440","messageId":"441","endLine":119,"endColumn":18},{"ruleId":"438","severity":1,"message":"470","line":119,"column":20,"nodeType":"440","messageId":"441","endLine":119,"endColumn":31},{"ruleId":"438","severity":1,"message":"471","line":120,"column":10,"nodeType":"440","messageId":"441","endLine":120,"endColumn":14},{"ruleId":"442","severity":1,"message":"459","line":152,"column":6,"nodeType":"444","endLine":152,"endColumn":8,"suggestions":"496"},{"ruleId":"438","severity":1,"message":"473","line":215,"column":9,"nodeType":"440","messageId":"441","endLine":215,"endColumn":20},{"ruleId":"438","severity":1,"message":"474","line":219,"column":9,"nodeType":"440","messageId":"441","endLine":219,"endColumn":20},{"ruleId":"438","severity":1,"message":"455","line":15,"column":3,"nodeType":"440","messageId":"441","endLine":15,"endColumn":12},{"ruleId":"438","severity":1,"message":"497","line":20,"column":8,"nodeType":"440","messageId":"441","endLine":20,"endColumn":14},{"ruleId":"438","severity":1,"message":"476","line":21,"column":8,"nodeType":"440","messageId":"441","endLine":21,"endColumn":18},{"ruleId":"438","severity":1,"message":"498","line":32,"column":10,"nodeType":"440","messageId":"441","endLine":32,"endColumn":18},{"ruleId":"442","severity":1,"message":"459","line":473,"column":6,"nodeType":"444","endLine":473,"endColumn":8,"suggestions":"499"},{"ruleId":"447","severity":1,"message":"448","line":489,"column":33,"nodeType":"449","messageId":"450","endLine":489,"endColumn":35},{"ruleId":"447","severity":1,"message":"448","line":495,"column":33,"nodeType":"449","messageId":"450","endLine":495,"endColumn":35},{"ruleId":"447","severity":1,"message":"448","line":501,"column":32,"nodeType":"449","messageId":"450","endLine":501,"endColumn":34},{"ruleId":"438","severity":1,"message":"500","line":523,"column":20,"nodeType":"440","messageId":"441","endLine":523,"endColumn":27},{"ruleId":"438","severity":1,"message":"501","line":545,"column":17,"nodeType":"440","messageId":"441","endLine":545,"endColumn":22},{"ruleId":"438","severity":1,"message":"502","line":546,"column":17,"nodeType":"440","messageId":"441","endLine":546,"endColumn":25},{"ruleId":"447","severity":1,"message":"448","line":23,"column":18,"nodeType":"449","messageId":"450","endLine":23,"endColumn":20},{"ruleId":"442","severity":1,"message":"459","line":54,"column":6,"nodeType":"444","endLine":54,"endColumn":8,"suggestions":"503"},{"ruleId":"438","severity":1,"message":"504","line":4,"column":3,"nodeType":"440","messageId":"441","endLine":4,"endColumn":7},{"ruleId":"438","severity":1,"message":"453","line":13,"column":3,"nodeType":"440","messageId":"441","endLine":13,"endColumn":9},{"ruleId":"438","severity":1,"message":"454","line":14,"column":3,"nodeType":"440","messageId":"441","endLine":14,"endColumn":19},{"ruleId":"438","severity":1,"message":"455","line":15,"column":3,"nodeType":"440","messageId":"441","endLine":15,"endColumn":12},{"ruleId":"438","severity":1,"message":"456","line":16,"column":3,"nodeType":"440","messageId":"441","endLine":16,"endColumn":11},{"ruleId":"438","severity":1,"message":"497","line":19,"column":8,"nodeType":"440","messageId":"441","endLine":19,"endColumn":14},{"ruleId":"438","severity":1,"message":"476","line":20,"column":8,"nodeType":"440","messageId":"441","endLine":20,"endColumn":18},{"ruleId":"438","severity":1,"message":"498","line":30,"column":10,"nodeType":"440","messageId":"441","endLine":30,"endColumn":18},{"ruleId":"442","severity":1,"message":"459","line":337,"column":6,"nodeType":"444","endLine":337,"endColumn":8,"suggestions":"505"},{"ruleId":"447","severity":1,"message":"448","line":353,"column":33,"nodeType":"449","messageId":"450","endLine":353,"endColumn":35},{"ruleId":"447","severity":1,"message":"448","line":359,"column":33,"nodeType":"449","messageId":"450","endLine":359,"endColumn":35},{"ruleId":"447","severity":1,"message":"448","line":365,"column":32,"nodeType":"449","messageId":"450","endLine":365,"endColumn":34},{"ruleId":"438","severity":1,"message":"500","line":387,"column":20,"nodeType":"440","messageId":"441","endLine":387,"endColumn":27},{"ruleId":"438","severity":1,"message":"501","line":397,"column":19,"nodeType":"440","messageId":"441","endLine":397,"endColumn":24},{"ruleId":"438","severity":1,"message":"502","line":398,"column":19,"nodeType":"440","messageId":"441","endLine":398,"endColumn":27},{"ruleId":"447","severity":1,"message":"448","line":164,"column":28,"nodeType":"449","messageId":"450","endLine":164,"endColumn":30},{"ruleId":"442","severity":1,"message":"459","line":547,"column":6,"nodeType":"444","endLine":547,"endColumn":8,"suggestions":"506"},{"ruleId":"447","severity":1,"message":"448","line":563,"column":33,"nodeType":"449","messageId":"450","endLine":563,"endColumn":35},{"ruleId":"447","severity":1,"message":"448","line":569,"column":33,"nodeType":"449","messageId":"450","endLine":569,"endColumn":35},{"ruleId":"447","severity":1,"message":"448","line":575,"column":32,"nodeType":"449","messageId":"450","endLine":575,"endColumn":34},{"ruleId":"438","severity":1,"message":"439","line":21,"column":8,"nodeType":"440","messageId":"441","endLine":21,"endColumn":14},{"ruleId":"438","severity":1,"message":"507","line":41,"column":20,"nodeType":"440","messageId":"441","endLine":41,"endColumn":31},{"ruleId":"438","severity":1,"message":"508","line":57,"column":17,"nodeType":"440","messageId":"441","endLine":57,"endColumn":25},{"ruleId":"438","severity":1,"message":"509","line":59,"column":10,"nodeType":"440","messageId":"441","endLine":59,"endColumn":19},{"ruleId":"438","severity":1,"message":"510","line":59,"column":21,"nodeType":"440","messageId":"441","endLine":59,"endColumn":33},{"ruleId":"438","severity":1,"message":"511","line":66,"column":10,"nodeType":"440","messageId":"441","endLine":66,"endColumn":15},{"ruleId":"438","severity":1,"message":"512","line":66,"column":17,"nodeType":"440","messageId":"441","endLine":66,"endColumn":25},{"ruleId":"438","severity":1,"message":"475","line":1,"column":22,"nodeType":"440","messageId":"441","endLine":1,"endColumn":31},{"ruleId":"438","severity":1,"message":"468","line":7,"column":3,"nodeType":"440","messageId":"441","endLine":7,"endColumn":8},{"ruleId":"447","severity":1,"message":"448","line":877,"column":36,"nodeType":"449","messageId":"450","endLine":877,"endColumn":38},{"ruleId":"438","severity":1,"message":"455","line":15,"column":3,"nodeType":"440","messageId":"441","endLine":15,"endColumn":12},{"ruleId":"438","severity":1,"message":"476","line":21,"column":8,"nodeType":"440","messageId":"441","endLine":21,"endColumn":18},{"ruleId":"442","severity":1,"message":"459","line":750,"column":6,"nodeType":"444","endLine":750,"endColumn":8,"suggestions":"513"},{"ruleId":"447","severity":1,"message":"448","line":766,"column":33,"nodeType":"449","messageId":"450","endLine":766,"endColumn":35},{"ruleId":"447","severity":1,"message":"448","line":772,"column":33,"nodeType":"449","messageId":"450","endLine":772,"endColumn":35},{"ruleId":"447","severity":1,"message":"448","line":778,"column":32,"nodeType":"449","messageId":"450","endLine":778,"endColumn":34},{"ruleId":"438","severity":1,"message":"452","line":7,"column":3,"nodeType":"440","messageId":"441","endLine":7,"endColumn":17},{"ruleId":"438","severity":1,"message":"453","line":13,"column":3,"nodeType":"440","messageId":"441","endLine":13,"endColumn":9},{"ruleId":"438","severity":1,"message":"454","line":14,"column":3,"nodeType":"440","messageId":"441","endLine":14,"endColumn":19},{"ruleId":"438","severity":1,"message":"455","line":15,"column":3,"nodeType":"440","messageId":"441","endLine":15,"endColumn":12},{"ruleId":"438","severity":1,"message":"479","line":366,"column":32,"nodeType":"440","messageId":"441","endLine":366,"endColumn":45},{"ruleId":"438","severity":1,"message":"480","line":366,"column":47,"nodeType":"440","messageId":"441","endLine":366,"endColumn":63},{"ruleId":"438","severity":1,"message":"481","line":366,"column":65,"nodeType":"440","messageId":"441","endLine":366,"endColumn":72},{"ruleId":"438","severity":1,"message":"514","line":570,"column":11,"nodeType":"440","messageId":"441","endLine":570,"endColumn":16},{"ruleId":"442","severity":1,"message":"459","line":596,"column":6,"nodeType":"444","endLine":596,"endColumn":8,"suggestions":"515"},{"ruleId":"438","severity":1,"message":"478","line":1,"column":43,"nodeType":"440","messageId":"441","endLine":1,"endColumn":50},{"ruleId":"438","severity":1,"message":"452","line":7,"column":3,"nodeType":"440","messageId":"441","endLine":7,"endColumn":17},{"ruleId":"438","severity":1,"message":"453","line":13,"column":3,"nodeType":"440","messageId":"441","endLine":13,"endColumn":9},{"ruleId":"438","severity":1,"message":"455","line":15,"column":3,"nodeType":"440","messageId":"441","endLine":15,"endColumn":12},{"ruleId":"438","severity":1,"message":"479","line":439,"column":32,"nodeType":"440","messageId":"441","endLine":439,"endColumn":45},{"ruleId":"438","severity":1,"message":"480","line":439,"column":47,"nodeType":"440","messageId":"441","endLine":439,"endColumn":63},{"ruleId":"438","severity":1,"message":"481","line":439,"column":65,"nodeType":"440","messageId":"441","endLine":439,"endColumn":72},{"ruleId":"442","severity":1,"message":"459","line":793,"column":6,"nodeType":"444","endLine":793,"endColumn":8,"suggestions":"516"},{"ruleId":"438","severity":1,"message":"452","line":7,"column":3,"nodeType":"440","messageId":"441","endLine":7,"endColumn":17},{"ruleId":"438","severity":1,"message":"446","line":10,"column":3,"nodeType":"440","messageId":"441","endLine":10,"endColumn":12},{"ruleId":"438","severity":1,"message":"453","line":13,"column":3,"nodeType":"440","messageId":"441","endLine":13,"endColumn":9},{"ruleId":"438","severity":1,"message":"454","line":14,"column":3,"nodeType":"440","messageId":"441","endLine":14,"endColumn":19},{"ruleId":"438","severity":1,"message":"455","line":15,"column":3,"nodeType":"440","messageId":"441","endLine":15,"endColumn":12},{"ruleId":"438","severity":1,"message":"456","line":16,"column":3,"nodeType":"440","messageId":"441","endLine":16,"endColumn":11},{"ruleId":"438","severity":1,"message":"483","line":20,"column":10,"nodeType":"440","messageId":"441","endLine":20,"endColumn":19},{"ruleId":"438","severity":1,"message":"484","line":450,"column":9,"nodeType":"440","messageId":"441","endLine":450,"endColumn":17},{"ruleId":"442","severity":1,"message":"459","line":720,"column":6,"nodeType":"444","endLine":720,"endColumn":8,"suggestions":"517"},{"ruleId":"438","severity":1,"message":"468","line":6,"column":3,"nodeType":"440","messageId":"441","endLine":6,"endColumn":8},{"ruleId":"442","severity":1,"message":"459","line":53,"column":6,"nodeType":"444","endLine":53,"endColumn":8,"suggestions":"518"},{"ruleId":"447","severity":1,"message":"448","line":164,"column":34,"nodeType":"449","messageId":"450","endLine":164,"endColumn":36},{"ruleId":"438","severity":1,"message":"486","line":1,"column":20,"nodeType":"440","messageId":"441","endLine":1,"endColumn":25},{"ruleId":"519","severity":1,"message":"520","line":37,"column":5,"nodeType":"521","messageId":"450","endLine":37,"endColumn":18},{"ruleId":"438","severity":1,"message":"522","line":57,"column":9,"nodeType":"440","messageId":"441","endLine":57,"endColumn":16},{"ruleId":"462","severity":1,"message":"463","line":152,"column":13,"nodeType":"464","endLine":159,"endColumn":14},{"ruleId":"447","severity":1,"message":"458","line":331,"column":18,"nodeType":"449","messageId":"450","endLine":331,"endColumn":20},{"ruleId":"447","severity":1,"message":"458","line":333,"column":21,"nodeType":"449","messageId":"450","endLine":333,"endColumn":23},{"ruleId":"447","severity":1,"message":"458","line":344,"column":18,"nodeType":"449","messageId":"450","endLine":344,"endColumn":20},{"ruleId":"447","severity":1,"message":"458","line":346,"column":21,"nodeType":"449","messageId":"450","endLine":346,"endColumn":23},{"ruleId":"462","severity":1,"message":"463","line":352,"column":9,"nodeType":"464","endLine":358,"endColumn":10},"no-native-reassign",["523"],"no-negated-in-lhs",["524"],"no-unused-vars","'isAuth' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setPopup'. Either include it or remove the dependency array.","ArrayExpression",["525"],"'TextField' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'IconButton' is defined but never used.","'InputAdornment' is defined but never used.","'Slider' is defined but never used.","'FormControlLabel' is defined but never used.","'FormGroup' is defined but never used.","'MenuItem' is defined but never used.","'Checkbox' is defined but never used.","Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["526"],"'source' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'getData' and 'getUser'. Either include them or remove the dependency array.",["527"],"'Profiler' is defined but never used.","'Modal' is defined but never used.","'userData' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'open' is assigned a value but never used.",["528"],"'handleClose' is assigned a value but never used.","'editDetails' is assigned a value but never used.","'useEffect' is defined but never used.","'Pagination' is defined but never used.",["529"],"'Linking' is defined but never used.","'searchOptions' is assigned a value but never used.","'setSearchOptions' is assigned a value but never used.","'getData' is assigned a value but never used.",["530"],"'useParams' is defined but never used.","'colorSet' is assigned a value but never used.",["531"],"'Slide' is defined but never used.",["532"],["523"],["524"],"'Paper' is defined but never used.","'hight' is assigned a value but never used.","'setHight' is assigned a value but never used.",["533"],["534"],["535"],["536"],"'Rating' is defined but never used.","'userType' is defined but never used.",["537"],"'address' is assigned a value but never used.","'today' is assigned a value but never used.","'deadline' is assigned a value but never used.",["538"],"'Chip' is defined but never used.",["539"],["540"],"'setLoggedin' is assigned a value but never used.","'setPhone' is assigned a value but never used.","'education' is assigned a value but never used.","'setEducation' is assigned a value but never used.","'files' is assigned a value but never used.","'setFiles' is assigned a value but never used.",["541"],"'jobId' is assigned a value but never used.",["542"],["543"],["544"],["545"],"no-dupe-keys","Duplicate key 'paddingBottom'.","ObjectExpression","'updates' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"546","fix":"547"},{"desc":"548","fix":"549"},{"desc":"550","fix":"551"},{"desc":"548","fix":"552"},{"desc":"548","fix":"553"},{"desc":"548","fix":"554"},{"desc":"548","fix":"555"},{"desc":"548","fix":"556"},{"desc":"546","fix":"557"},{"desc":"550","fix":"558"},{"desc":"548","fix":"559"},{"desc":"548","fix":"560"},{"desc":"548","fix":"561"},{"desc":"548","fix":"562"},{"desc":"548","fix":"563"},{"desc":"548","fix":"564"},{"desc":"548","fix":"565"},{"desc":"548","fix":"566"},{"desc":"548","fix":"567"},{"desc":"548","fix":"568"},{"desc":"548","fix":"569"},"Update the dependencies array to be: [setPopup]",{"range":"570","text":"571"},"Update the dependencies array to be: [getData]",{"range":"572","text":"573"},"Update the dependencies array to be: [getData, getUser]",{"range":"574","text":"575"},{"range":"576","text":"573"},{"range":"577","text":"573"},{"range":"578","text":"573"},{"range":"579","text":"573"},{"range":"580","text":"573"},{"range":"581","text":"571"},{"range":"582","text":"575"},{"range":"583","text":"573"},{"range":"584","text":"573"},{"range":"585","text":"573"},{"range":"586","text":"573"},{"range":"587","text":"573"},{"range":"588","text":"573"},{"range":"589","text":"573"},{"range":"590","text":"573"},{"range":"591","text":"573"},{"range":"592","text":"573"},{"range":"593","text":"573"},[422,424],"[setPopup]",[6486,6488],"[getData]",[21364,21366],"[getData, getUser]",[3872,3874],[22507,22509],[22880,22882],[21786,21788],[1039,1041],[422,424],[21364,21366],[6486,6488],[3872,3874],[14472,14474],[1149,1151],[10090,10092],[16570,16572],[22507,22509],[17803,17805],[22880,22882],[21786,21788],[1039,1041]]